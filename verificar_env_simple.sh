#!/bin/bash

# =====================================
# VERIFICADOR SIMPLE DE ARCHIVO .env
# =====================================

echo "üîç VERIFICADOR SIMPLE DE ARCHIVO .env"
echo "====================================="

# Verificar existencia
if [ ! -f ".env" ]; then
    echo "‚ùå Archivo .env no encontrado"
    exit 1
fi

echo "‚úÖ Archivo .env encontrado"
echo ""

# Variables cr√≠ticas a verificar
echo "üìã VERIFICANDO VARIABLES CR√çTICAS:"
echo "-----------------------------------"

# Funci√≥n para verificar variable
check_var() {
    local var_name="$1"
    local var_desc="$2"
    local show_value="$3"
    
    if grep -q "^${var_name}=" .env; then
        if [ "$show_value" = "show" ]; then
            local value=$(grep "^${var_name}=" .env | cut -d'=' -f2-)
            echo "‚úÖ $var_name: $value"
        else
            local value=$(grep "^${var_name}=" .env | cut -d'=' -f2- | cut -c1-10)
            echo "‚úÖ $var_name: ${value}...***"
        fi
    else
        echo "‚ùå $var_name: NO DEFINIDA"
    fi
}

# Verificar variables
check_var "SECRET_KEY" "Clave secreta Flask" "hide"
check_var "MONGO_URI" "URI MongoDB" "show"
check_var "BREVO_SMTP_USERNAME" "Usuario SMTP" "show"
check_var "BREVO_SMTP_PASSWORD" "Password SMTP" "hide"
check_var "NOTIFICATION_EMAIL_1" "Email notificaci√≥n 1" "show"
check_var "NOTIFICATION_EMAIL_2" "Email notificaci√≥n 2" "show"

echo ""
echo "üö® VERIFICACI√ìN DE SEGURIDAD:"
echo "-----------------------------"

# Verificar SECRET_KEY por defecto
if grep -q "clave-secreta-super-segura" .env; then
    echo "‚ö†Ô∏è  SECRET_KEY usando valor por defecto"
else
    echo "‚úÖ SECRET_KEY personalizada"
fi

# Verificar password comprometida
if grep -q "Rmp3UXwsIkvA0c1d" .env; then
    echo "üö® BREVO_SMTP_PASSWORD usando credencial comprometida"
else
    echo "‚úÖ BREVO_SMTP_PASSWORD actualizada"
fi

# Verificar API key placeholder
if grep -q "tu-nueva-brevo-api-key" .env; then
    echo "‚ö†Ô∏è  BREVO_API_KEY necesita configuraci√≥n"
else
    echo "‚úÖ BREVO_API_KEY configurada"
fi

echo ""
echo "üîê VERIFICACI√ìN DE .gitignore:"
echo "------------------------------"

if grep -q "^\.env$" .gitignore; then
    echo "‚úÖ .env est√° en .gitignore"
else
    echo "‚ö†Ô∏è  .env NO est√° en .gitignore"
fi

if git status --porcelain | grep -q "\.env"; then
    echo "‚ö†Ô∏è  .env aparece en git status (no deber√≠a)"
else
    echo "‚úÖ .env no aparece en git status"
fi

echo ""
echo "üìä RESUMEN DEL ARCHIVO .env:"
echo "============================="
echo "üìù Total de l√≠neas: $(wc -l < .env)"
echo "üîß Variables definidas: $(grep -c "^[A-Z].*=" .env)"
echo "üí¨ L√≠neas de comentario: $(grep -c "^#" .env)"
echo "üìÖ Fecha de modificaci√≥n: $(stat -c %y .env | cut -d' ' -f1)"

echo ""
echo "‚úÖ Verificaci√≥n completada"