#!/usr/bin/env python3
"""
Diagn√≥stico de la Aplicaci√≥n macOS EDF Cat√°logoDeTablas
=======================================================

Este script verifica que todos los componentes de la aplicaci√≥n
est√©n funcionando correctamente.

"""

import json
import os
import subprocess
import sys
import time

import requests


def verificar_estructura_app():
    """Verifica la estructura de la aplicaci√≥n."""
    print("üîç Verificando estructura de la aplicaci√≥n...")

    app_path = "dist/EDF_CatalogoDeTablas.app"

    if not os.path.exists(app_path):
        print("‚ùå Error: No se encontr√≥ la aplicaci√≥n")
        return False

    # Verificar archivos cr√≠ticos
    critical_files = [
        "Contents/MacOS/EDF_CatalogoDeTablas",
        "Contents/Resources/app",
        "Contents/Resources/tools/db_utils/credentials.json",
        "Contents/Resources/tools/db_utils/token.json",
        "Contents/Resources/config.py",
        "Contents/Resources/main_app.py",
    ]

    for file_path in critical_files:
        full_path = os.path.join(app_path, file_path)
        if os.path.exists(full_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - FALTANTE")
            return False

    return True


def verificar_permisos():
    """Verifica los permisos de ejecuci√≥n."""
    print("\nüîê Verificando permisos...")

    executable_path = (
        "dist/EDF_CatalogoDeTablas.app/Contents/MacOS/EDF_CatalogoDeTablas"
    )

    if not os.access(executable_path, os.X_OK):
        print("‚ùå Error: El ejecutable no tiene permisos de ejecuci√≥n")
        return False

    print("‚úÖ Permisos de ejecuci√≥n correctos")
    return True


def verificar_credenciales():
    """Verifica que las credenciales de Google Drive est√©n presentes."""
    print("\nüîë Verificando credenciales...")

    creds_path = "dist/EDF_CatalogoDeTablas.app/Contents/Resources/tools/db_utils/credentials.json"
    token_path = (
        "dist/EDF_CatalogoDeTablas.app/Contents/Resources/tools/db_utils/token.json"
    )

    if not os.path.exists(creds_path):
        print("‚ùå Error: credentials.json no encontrado")
        return False

    if not os.path.exists(token_path):
        print("‚ùå Error: token.json no encontrado")
        return False

    # Verificar que los archivos no est√©n vac√≠os
    if os.path.getsize(creds_path) < 100:
        print("‚ùå Error: credentials.json parece estar vac√≠o")
        return False

    if os.path.getsize(token_path) < 100:
        print("‚ùå Error: token.json parece estar vac√≠o")
        return False

    print("‚úÖ Credenciales de Google Drive presentes")
    return True


def verificar_arranque_finder():
    """Verifica que la aplicaci√≥n pueda arrancar desde Finder."""
    print("\nüçé Verificando arranque desde Finder...")

    # Limpiar atributos extendidos que puedan bloquear la ejecuci√≥n
    try:
        subprocess.run(
            ["xattr", "-cr", "dist/EDF_CatalogoDeTablas.app"],
            check=True,
            capture_output=True,
        )
        print("‚úÖ Atributos extendidos limpiados")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  No se pudieron limpiar atributos extendidos")

    # Verificar que la aplicaci√≥n tenga el formato correcto
    try:
        result = subprocess.run(
            [
                "file",
                "dist/EDF_CatalogoDeTablas.app/Contents/MacOS/EDF_CatalogoDeTablas",
            ],
            check=True,
            capture_output=True,
            text=True,
        )
        if "Mach-O" in result.stdout:
            print("‚úÖ Formato de ejecutable correcto (Mach-O)")
            return True
        else:
            print("‚ùå Formato de ejecutable incorrecto")
            return False
    except subprocess.CalledProcessError:
        print("‚ùå Error al verificar formato de ejecutable")
        return False


def verificar_funcionamiento_basico():
    """Verifica el funcionamiento b√°sico de la aplicaci√≥n."""
    print("\nüöÄ Verificando funcionamiento b√°sico...")

    # Intentar ejecutar la aplicaci√≥n en modo prueba
    try:
        # Ejecutar con timeout para evitar que se quede colgada
        process = subprocess.Popen(
            ["dist/EDF_CatalogoDeTablas.app/Contents/MacOS/EDF_CatalogoDeTablas"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )

        # Esperar un poco para que inicie
        time.sleep(5)

        # Verificar si el proceso sigue ejecut√°ndose
        if process.poll() is None:
            print("‚úÖ Aplicaci√≥n inici√≥ correctamente")
            # Terminar el proceso
            process.terminate()
            try:
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()
            return True
        else:
            stdout, stderr = process.communicate()
            print("‚ùå La aplicaci√≥n se cerr√≥ prematuramente")
            print(f"   Salida: {stdout[:200]}...")
            print(f"   Errores: {stderr[:200]}...")
            return False

    except Exception as e:
        print(f"‚ùå Error al ejecutar la aplicaci√≥n: {e}")
        return False


def verificar_conectividad():
    """Verifica la conectividad de red."""
    print("\nüåê Verificando conectividad...")

    try:
        # Verificar conexi√≥n a internet
        response = requests.get("https://www.google.com", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Conexi√≥n a internet funcionando")
        else:
            print("‚ö†Ô∏è  Conexi√≥n a internet limitada")
    except Exception as e:
        print(f"‚ùå Error de conectividad: {e}")
        return False

    return True


def main():
    """Funci√≥n principal de diagn√≥stico."""
    print("üîß Diagn√≥stico de la Aplicaci√≥n macOS EDF Cat√°logoDeTablas")
    print("=" * 60)

    # Realizar todas las verificaciones
    checks = [
        ("Estructura de la aplicaci√≥n", verificar_estructura_app),
        ("Permisos de ejecuci√≥n", verificar_permisos),
        ("Credenciales de Google Drive", verificar_credenciales),
        ("Arranque desde Finder", verificar_arranque_finder),
        ("Conectividad de red", verificar_conectividad),
    ]

    results = []
    for name, check_func in checks:
        try:
            print(f"\nüìã {name}:")
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Error en {name}: {e}")
            results.append((name, False))

    # Resumen final
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE DIAGN√ìSTICO")
    print("=" * 60)

    passed = sum(1 for _, result in results if result)
    total = len(results)

    for name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{status} - {name}")

    print(f"\n‚úÖ Verificaciones exitosas: {passed}/{total}")

    if passed == total:
        print("üéâ ¬°Todas las verificaciones pasaron!")
        print("üöÄ La aplicaci√≥n est√° lista para uso completo")
        print("\nüí° Para usar la aplicaci√≥n:")
        print("   1. Abre Finder")
        print("   2. Navega a la carpeta dist/")
        print("   3. Haz doble clic en EDF_CatalogoDeTablas.app")
        return True
    else:
        print("‚ö†Ô∏è  Algunas verificaciones fallaron")
        print("üîß Revisa los errores anteriores")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
