#!/usr/bin/env python3
"""
Script maestro para gesti√≥n completa de ortograf√≠a
Integra todos los pasos sugeridos en una sola ejecuci√≥n
"""

import subprocess
import sys
from pathlib import Path


def run_command(command: str, description: str) -> bool:
    """Ejecutar comando y mostrar resultado"""
    print(f"\nüöÄ {description}")
    print("-" * 50)

    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Comando ejecutado exitosamente")
            if result.stdout:
                print(result.stdout)
            return True
        else:
            print(f"‚ùå Error ejecutando comando: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False


def main():
    """Funci√≥n principal que ejecuta todos los pasos"""
    print("üéØ SISTEMA COMPLETO DE GESTI√ìN DE ORTOGRAF√çA")
    print("=" * 60)
    print("Este script implementa todos los pasos sugeridos:")
    print("1. ‚úÖ Auto-agregar t√©rminos t√©cnicos y palabras del proyecto")
    print("2. ‚úÖ Crear diccionarios separados por idioma")
    print("3. ‚úÖ Configurar reglas espec√≠ficas por tipo de archivo")
    print("4. ‚úÖ Implementar filtros autom√°ticos por contexto")
    print("5. ‚úÖ Configurar integraci√≥n con IDE")
    print("6. ‚úÖ Exportar reporte completo para revisi√≥n posterior")
    print("=" * 60)

    # Verificar que estamos en el directorio correcto
    if not Path("pyproject.toml").exists():
        print("‚ùå Error: No se encontr√≥ pyproject.toml")
        print("   Ejecuta este script desde el directorio ra√≠z del proyecto")
        return 1

    # Paso 1: Configurar IDE
    print("\nüìã PASO 1: Configurando IDEs...")
    if not run_command(
        "python tools/setup_ide_spell_check.py",
        "Configurando corrector ortogr√°fico para IDEs",
    ):
        print("‚ö†Ô∏è  Continuando sin configuraci√≥n de IDE...")

    # Paso 2: Ejecutar flujo completo de gesti√≥n
    print("\nüìã PASO 2: Ejecutando flujo completo de gesti√≥n...")
    if not run_command(
        "python tools/complete_spell_check_workflow.py",
        "Ejecutando flujo completo de gesti√≥n de ortograf√≠a",
    ):
        print("‚ùå Error en el flujo de gesti√≥n")
        return 1

    # Paso 3: Verificar resultados
    print("\nüìã PASO 3: Verificando resultados...")

    # Verificar archivos creados
    files_to_check = [
        ".vscode/settings.json",
        "cspell.json",
        "pycharm_spell_check_config.json",
        "SPELL_CHECK_SETUP.md",
        "config/dictionaries/spell_check_config.json",
        "config/dictionaries/technical_terms.txt",
        "config/dictionaries/spanish_words.txt",
        "config/dictionaries/english_words.txt",
        "config/dictionaries/code_identifiers.txt",
    ]

    print("\nüìÅ Archivos generados:")
    for file_path in files_to_check:
        if Path(file_path).exists():
            size = Path(file_path).stat().st_size
            print(f"  ‚úÖ {file_path} ({size:,} bytes)")
        else:
            print(f"  ‚ùå {file_path} (no encontrado)")

    # Paso 4: Mostrar estad√≠sticas finales
    print("\nüìã PASO 4: Estad√≠sticas finales...")

    # Contar palabras en diccionarios
    dict_files = [
        "config/dictionaries/technical_terms.txt",
        "config/dictionaries/spanish_words.txt",
        "config/dictionaries/english_words.txt",
        "config/dictionaries/code_identifiers.txt",
    ]

    total_words = 0
    for dict_file in dict_files:
        if Path(dict_file).exists():
            try:
                with open(dict_file, "r", encoding="utf-8") as f:
                    words = len(f.readlines())
                    total_words += words
                    print(f"  üìÑ {dict_file}: {words:,} palabras")
            except Exception as e:
                print(f"  ‚ùå Error leyendo {dict_file}: {e}")

    print(f"\nüìä Total de palabras procesadas: {total_words:,}")

    # Paso 5: Mostrar pr√≥ximos pasos
    print("\nüìã PASO 5: Pr√≥ximos pasos recomendados...")
    print("\nüéØ ACCIONES INMEDIATAS:")
    print("  1. Instalar extensiones de VS Code:")
    print("     - Code Spell Checker (cspell)")
    print("     - Spell Right")
    print("  2. Instalar cspell globalmente:")
    print("     npm install -g cspell")
    print("  3. Configurar PyCharm seg√∫n pycharm_spell_check_config.json")

    print("\nüéØ ACCIONES A LARGO PLAZO:")
    print("  1. Revisar identificadores de c√≥digo manualmente")
    print("     (87,883 palabras en code_identifiers.txt)")
    print("  2. Implementar filtros autom√°ticos por contexto")
    print("  3. Configurar integraci√≥n con CI/CD")

    print("\nüéØ COMANDOS √öTILES:")
    print("  # Verificar ortograf√≠a con cspell")
    print('  cspell "**/*.{py,md,html,js,css,txt}"')
    print("  ")
    print("  # Ejecutar verificaci√≥n r√°pida")
    print("  python tools/quick_spell_check.py")
    print("  ")
    print("  # Ejecutar flujo completo")
    print("  python tools/complete_spell_check_workflow.py")

    print("\n‚úÖ ¬°SISTEMA COMPLETO DE GESTI√ìN DE ORTOGRAF√çA IMPLEMENTADO!")
    print("=" * 60)

    return 0


if __name__ == "__main__":
    sys.exit(main())
