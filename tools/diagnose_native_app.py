#!/usr/bin/env python3
"""
Script de diagn√≥stico para la aplicaci√≥n nativa macOS
Autor: EDF Developer - 2025
"""

import os
import subprocess
import time
from datetime import datetime

import requests


def check_native_app_process():
    """Verifica si la aplicaci√≥n nativa est√° ejecut√°ndose"""
    print("üîç VERIFICANDO PROCESO DE LA APLICACI√ìN NATIVA")
    print("=" * 50)

    try:
        result = subprocess.run(["ps", "aux"], capture_output=True, text=True)
        lines = result.stdout.split("\n")

        app_processes = []
        for line in lines:
            if "EDF_CatalogoDeTablas_Web_Native" in line and "grep" not in line:
                app_processes.append(line)

        if app_processes:
            print(f"‚úÖ Aplicaci√≥n nativa ejecut√°ndose: {len(app_processes)} proceso(s)")
            for process in app_processes:
                print(f"   - {process.strip()}")
            return True
        else:
            print("‚ùå Aplicaci√≥n nativa no est√° ejecut√°ndose")
            return False

    except Exception as e:
        print(f"‚ùå Error verificando proceso: {e}")
        return False


def check_network_ports():
    """Verifica los puertos de red en uso"""
    print("\nüåê VERIFICANDO PUERTOS DE RED")
    print("=" * 50)

    try:
        # Verificar puerto 5001
        result = subprocess.run(["lsof", "-i", ":5001"], capture_output=True, text=True)
        if result.stdout.strip():
            print("‚úÖ Puerto 5001 en uso:")
            print(result.stdout)
            return True
        else:
            print("‚ùå Puerto 5001 no est√° en uso")

        # Verificar otros puertos comunes
        common_ports = [5000, 8000, 8080, 3000]
        for port in common_ports:
            result = subprocess.run(
                ["lsof", "-i", f":{port}"], capture_output=True, text=True
            )
            if result.stdout.strip():
                print(f"‚ö†Ô∏è  Puerto {port} en uso:")
                print(result.stdout)

        return False

    except Exception as e:
        print(f"‚ùå Error verificando puertos: {e}")
        return False


def test_webview_connection():
    """Prueba la conexi√≥n a la aplicaci√≥n webview"""
    print("\nüñ•Ô∏è  PROBANDO CONEXI√ìN WEBVIEW")
    print("=" * 50)

    # Probar diferentes puertos
    ports = [5001, 5000, 8000, 8080, 3000]

    for port in ports:
        try:
            response = requests.get(f"http://localhost:{port}", timeout=2)
            if response.status_code == 200:
                print(f"‚úÖ Aplicaci√≥n respondiendo en puerto {port}")
                return port
            else:
                print(f"‚ö†Ô∏è  Puerto {port} responde con c√≥digo: {response.status_code}")
        except requests.exceptions.ConnectionError:
            print(f"‚ùå Puerto {port} no responde")
        except Exception as e:
            print(f"‚ùå Error probando puerto {port}: {e}")

    print("‚ùå No se encontr√≥ ning√∫n puerto respondiendo")
    return None


def check_app_logs():
    """Verifica los logs de la aplicaci√≥n"""
    print("\nüìã VERIFICANDO LOGS DE LA APLICACI√ìN")
    print("=" * 50)

    app_path = "dist/EDF_CatalogoDeTablas_Web_Native.app"

    # Verificar archivos de sesi√≥n
    session_dir = os.path.join(app_path, "Contents", "MacOS", "flask_session")
    if os.path.exists(session_dir):
        session_files = os.listdir(session_dir)
        print(f"‚úÖ Archivos de sesi√≥n encontrados: {len(session_files)}")
        for file in session_files[:3]:  # Mostrar solo los primeros 3
            print(f"   - {file}")
    else:
        print("‚ùå Directorio de sesiones no encontrado")

    # Verificar archivos .env
    env_files = [
        os.path.join(app_path, ".env"),
        os.path.join(app_path, "Contents", "Resources", ".env"),
    ]

    for env_file in env_files:
        if os.path.exists(env_file):
            print(f"‚úÖ Archivo .env encontrado: {env_file}")
            # Verificar contenido (sin mostrar credenciales)
            try:
                with open(env_file, "r") as f:
                    content = f.read()
                    if "MONGO_URI=" in content:
                        print("   - MONGO_URI configurada")
                    else:
                        print("   - MONGO_URI no encontrada")
            except Exception as e:
                print(f"   - Error leyendo archivo: {e}")
        else:
            print(f"‚ùå Archivo .env no encontrado: {env_file}")


def check_app_permissions():
    """Verifica los permisos de la aplicaci√≥n"""
    print("\nüîê VERIFICANDO PERMISOS")
    print("=" * 50)

    app_path = "dist/EDF_CatalogoDeTablas_Web_Native.app"

    try:
        # Verificar permisos de la aplicaci√≥n
        stat = os.stat(app_path)
        permissions = oct(stat.st_mode)[-3:]
        print(f"üìÅ Permisos de la aplicaci√≥n: {permissions}")

        # Verificar permisos del ejecutable
        executable_path = os.path.join(
            app_path, "Contents", "MacOS", "EDF_CatalogoDeTablas_Web_Native"
        )
        if os.path.exists(executable_path):
            stat = os.stat(executable_path)
            permissions = oct(stat.st_mode)[-3:]
            print(f"‚öôÔ∏è  Permisos del ejecutable: {permissions}")

            if permissions == "755":
                print("‚úÖ Permisos de ejecuci√≥n correctos")
            else:
                print("‚ùå Permisos de ejecuci√≥n incorrectos")
        else:
            print("‚ùå Ejecutable no encontrado")

    except Exception as e:
        print(f"‚ùå Error verificando permisos: {e}")


def restart_native_app():
    """Reinicia la aplicaci√≥n nativa"""
    print("\nüîÑ REINICIANDO APLICACI√ìN NATIVA")
    print("=" * 50)

    try:
        # Detener aplicaci√≥n si est√° ejecut√°ndose
        subprocess.run(
            ["pkill", "-f", "EDF_CatalogoDeTablas_Web_Native"], capture_output=True
        )
        print("‚úÖ Aplicaci√≥n detenida")

        # Esperar un momento
        time.sleep(2)

        # Iniciar aplicaci√≥n nuevamente
        app_path = "dist/EDF_CatalogoDeTablas_Web_Native.app"
        subprocess.run(["open", app_path], capture_output=True)
        print("‚úÖ Aplicaci√≥n iniciada")

        # Esperar a que se inicie
        time.sleep(5)

        return True

    except Exception as e:
        print(f"‚ùå Error reiniciando aplicaci√≥n: {e}")
        return False


def main():
    """Funci√≥n principal"""
    print("üîç DIAGN√ìSTICO APLICACI√ìN NATIVA MACOS")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

    try:
        # Paso 1: Verificar proceso
        app_running = check_native_app_process()

        # Paso 2: Verificar puertos
        ports_ok = check_network_ports()

        # Paso 3: Probar conexi√≥n webview
        working_port = test_webview_connection()

        # Paso 4: Verificar logs
        check_app_logs()

        # Paso 5: Verificar permisos
        check_app_permissions()

        # Resumen
        print("\nüìä RESUMEN DEL DIAGN√ìSTICO")
        print("=" * 50)

        if app_running:
            print("‚úÖ Aplicaci√≥n nativa est√° ejecut√°ndose")
        else:
            print("‚ùå Aplicaci√≥n nativa no est√° ejecut√°ndose")

        if working_port:
            print(f"‚úÖ Aplicaci√≥n respondiendo en puerto {working_port}")
            print(f"üåê URL: http://localhost:{working_port}")
        else:
            print("‚ùå Aplicaci√≥n no responde en ning√∫n puerto")

        if not app_running or not working_port:
            print("\nüîß RECOMENDACIONES:")
            print("   1. Ejecuta: ./launch_native_app.sh")
            print("   2. O haz doble clic en: dist/EDF_CatalogoDeTablas_Web_Native.app")
            print(
                "   3. Si persiste el problema, ejecuta: python3 tools/fix_native_app_macos.py"
            )

    except Exception as e:
        print(f"\n‚ùå Error durante el diagn√≥stico: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
