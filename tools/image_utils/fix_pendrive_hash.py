#!/usr/bin/env python3
"""
Script para corregir el hash de imagen del pendrive en la base de datos
"""

import os
import sys

from bson import ObjectId
from dotenv import load_dotenv
from pymongo import MongoClient

# Cargar variables de entorno
load_dotenv()


def fix_pendrive_hash():
    """Corrige el hash de imagen del pendrive en la base de datos"""

    # Conectar a MongoDB
    mongo_uri = os.getenv("MONGO_URI")
    if not mongo_uri:
        print("‚ùå Error: MONGO_URI no encontrado en las variables de entorno")
        return False

    try:
        client = MongoClient(mongo_uri)
        db = client.get_database()

        # Hash incorrecto que est√° en la base de datos
        hash_incorrecto = "db318c3111d84430badcfb59623825a3_108465-2-pendrive_usb30_256gb_corsair_flash_voyager_slider_cmfsl3b_256gb-5.jpg"

        # Hash correcto que existe en el filesystem (usamos el primero encontrado)
        hash_correcto = "5abe0ac45cf94a6490482372c9e9ba38_108465-2-pendrive_usb30_256gb_corsair_flash_voyager_slider_cmfsl3b_256gb-5.jpg"

        print(
            f"üîç Buscando registros con hash incorrecto del pendrive: {hash_incorrecto}"
        )
        print(f"üìã Hash correcto a usar: {hash_correcto}")

        # Buscar en la colecci√≥n spreadsheets
        spreadsheets_collection = db["spreadsheets"]

        # Buscar documentos que contengan el hash incorrecto
        query = {
            "$or": [{"rows.images": hash_incorrecto}, {"data.images": hash_incorrecto}]
        }

        documentos_encontrados = list(spreadsheets_collection.find(query))
        print(f"üìä Documentos encontrados: {len(documentos_encontrados)}")

        if not documentos_encontrados:
            print("‚úÖ No se encontraron documentos con el hash incorrecto del pendrive")
            return True

        # Procesar cada documento encontrado
        for doc in documentos_encontrados:
            doc_id = doc["_id"]
            print(f"\nüîß Procesando documento: {doc_id}")
            print(f"   Nombre: {doc.get('name', 'Sin nombre')}")
            print(f"   Owner: {doc.get('owner', 'Sin owner')}")

            actualizado = False

            # Actualizar en rows.images
            if "rows" in doc:
                for i, row in enumerate(doc["rows"]):
                    if "images" in row and hash_incorrecto in row["images"]:
                        print(
                            f"   üìù Actualizando row {i} - Item: {row.get('Nombre', 'Sin nombre')}"
                        )
                        # Reemplazar el hash incorrecto con el correcto
                        new_images = [
                            hash_correcto if img == hash_incorrecto else img
                            for img in row["images"]
                        ]

                        result = spreadsheets_collection.update_one(
                            {"_id": doc_id}, {"$set": {f"rows.{i}.images": new_images}}
                        )

                        if result.modified_count > 0:
                            print(f"   ‚úÖ Row {i} actualizado correctamente")
                            actualizado = True
                        else:
                            print(f"   ‚ùå Error actualizando row {i}")

            # Actualizar en data.images
            if "data" in doc:
                for i, item in enumerate(doc["data"]):
                    if "images" in item and hash_incorrecto in item["images"]:
                        print(
                            f"   üìù Actualizando data item {i} - Item: {item.get('Nombre', 'Sin nombre')}"
                        )
                        # Reemplazar el hash incorrecto con el correcto
                        new_images = [
                            hash_correcto if img == hash_incorrecto else img
                            for img in item["images"]
                        ]

                        result = spreadsheets_collection.update_one(
                            {"_id": doc_id}, {"$set": {f"data.{i}.images": new_images}}
                        )

                        if result.modified_count > 0:
                            print(f"   ‚úÖ Data item {i} actualizado correctamente")
                            actualizado = True
                        else:
                            print(f"   ‚ùå Error actualizando data item {i}")

            if actualizado:
                print(f"   üéâ Documento {doc_id} actualizado exitosamente")
            else:
                print(f"   ‚ö†Ô∏è  No se realizaron cambios en documento {doc_id}")

        # Verificar que la correcci√≥n funcion√≥
        print("\nüîç Verificando correcci√≥n...")
        documentos_verificacion = list(spreadsheets_collection.find(query))

        if len(documentos_verificacion) == 0:
            print(
                "‚úÖ ¬°Correcci√≥n exitosa! No quedan registros con el hash incorrecto del pendrive"
            )
            return True
        else:
            print(
                f"‚ùå A√∫n quedan {len(documentos_verificacion)} registros con el hash incorrecto"
            )
            return False

    except Exception as e:
        print(f"‚ùå Error conectando a MongoDB: {e}")
        return False
    finally:
        if "client" in locals():
            client.close()


if __name__ == "__main__":
    print("üöÄ Iniciando correcci√≥n de hash de imagen del pendrive...")
    print("=" * 60)

    success = fix_pendrive_hash()

    print("=" * 60)
    if success:
        print("‚úÖ Script ejecutado exitosamente")
        sys.exit(0)
    else:
        print("‚ùå Script termin√≥ con errores")
        sys.exit(1)
