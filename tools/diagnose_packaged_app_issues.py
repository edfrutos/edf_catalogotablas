#!/usr/bin/env python3
"""
Script de diagn√≥stico espec√≠fico para problemas de la aplicaci√≥n empaquetada
"""

import os
import sys
import tempfile
from pathlib import Path
import requests
import time  # pyright: ignore[reportUnusedImport]
import subprocess  # pyright: ignore[reportUnusedImport]
import json  # pyright: ignore[reportUnusedImport]


def check_app_launch():
    """Verificar si la aplicaci√≥n se puede lanzar"""
    print("üöÄ Verificando lanzamiento de la aplicaci√≥n...")
    print("=" * 50)

    app_path = "dist/EDF_CatalogoDeTablas_Web_Native.app"

    if not os.path.exists(app_path):
        print(f"‚ùå Aplicaci√≥n no encontrada: {app_path}")
        return False

    print(f"‚úÖ Aplicaci√≥n encontrada: {app_path}")

    # Verificar estructura de la aplicaci√≥n
    contents_path = os.path.join(app_path, "Contents")
    if not os.path.exists(contents_path):
        print("‚ùå Estructura de aplicaci√≥n incorrecta")
        return False

    # Verificar ejecutable
    executable_path = os.path.join(
        contents_path, "MacOS", "EDF_CatalogoDeTablas_Web_Native"
    )
    if not os.path.exists(executable_path):
        print("‚ùå Ejecutable no encontrado")
        return False

    print("‚úÖ Estructura de aplicaci√≥n correcta")
    return True


def check_icon():
    """Verificar icono de la aplicaci√≥n"""
    print("\nüé® Verificando icono de la aplicaci√≥n...")
    print("=" * 40)

    # Verificar archivo de icono
    icon_path = (
        "dist/EDF_CatalogoDeTablas_Web_Native.app/Contents/Resources/edf_developer.icns"
    )
    if os.path.exists(icon_path):
        size = os.path.getsize(icon_path)
        print(f"‚úÖ Icono encontrado: {icon_path} ({size} bytes)")
    else:
        print(f"‚ùå Icono no encontrado: {icon_path}")

    # Verificar configuraci√≥n en Info.plist
    info_plist_path = "dist/EDF_CatalogoDeTablas_Web_Native.app/Contents/Info.plist"
    if os.path.exists(info_plist_path):
        try:
            with open(info_plist_path, "r") as f:
                content = f.read()
                if "edf_developer.icns" in content:
                    print("‚úÖ Icono configurado en Info.plist")
                else:
                    print("‚ùå Icono no configurado en Info.plist")
        except Exception as e:
            print(f"‚ùå Error al leer Info.plist: {e}")
    else:
        print("‚ùå Info.plist no encontrado")


def check_server_startup():
    """Verificar inicio del servidor"""
    print("\nüåê Verificando inicio del servidor...")
    print("=" * 40)

    # Intentar iniciar el servidor manualmente
    try:
        # Cambiar al directorio de la aplicaci√≥n
        app_resources = "dist/EDF_CatalogoDeTablas_Web_Native.app/Contents/Resources"
        if os.path.exists(app_resources):
            os.chdir(app_resources)
            print(f"üìÅ Cambiado a directorio: {os.getcwd()}")

            # Verificar archivos cr√≠ticos
            critical_files = ["wsgi.py", "config.py", ".env"]
            for file in critical_files:
                if os.path.exists(file):
                    print(f"‚úÖ {file} encontrado")
                else:
                    print(f"‚ùå {file} no encontrado")

            # Intentar importar wsgi
            try:
                sys.path.insert(0, app_resources)
                from wsgi import app

                print("‚úÖ M√≥dulo wsgi importado correctamente")

                # Verificar configuraci√≥n de la app
                if hasattr(app, "config"):
                    print("‚úÖ Configuraci√≥n de Flask disponible")
                else:
                    print("‚ùå Configuraci√≥n de Flask no disponible")

            except ImportError as e:
                print(f"‚ùå Error al importar wsgi: {e}")
            except Exception as e:
                print(f"‚ùå Error al cargar aplicaci√≥n: {e}")

        else:
            print("‚ùå Directorio de recursos no encontrado")

    except Exception as e:
        print(f"‚ùå Error al verificar servidor: {e}")


def check_network_access():
    """Verificar acceso de red"""
    print("\nüåê Verificando acceso de red...")
    print("=" * 40)

    # Verificar puerto 5004
    try:
        response = requests.get("http://127.0.0.1:5004", timeout=2)
        print(f"‚úÖ Puerto 5004 accesible (status: {response.status_code})")
        return True
    except requests.exceptions.ConnectionError:
        print("‚ùå Puerto 5004 no accesible")
    except Exception as e:
        print(f"‚ùå Error al conectar: {e}")

    # Verificar otros puertos
    for port in [5000, 5001, 5002, 5003, 5005]:
        try:
            response = requests.get(f"http://127.0.0.1:{port}", timeout=1)
            print(f"‚ö†Ô∏è  Puerto {port} ocupado (status: {response.status_code})")
        except:
            pass

    return False


def check_permissions():
    """Verificar permisos de la aplicaci√≥n"""
    print("\nüîê Verificando permisos...")
    print("=" * 30)

    app_path = "dist/EDF_CatalogoDeTablas_Web_Native.app"

    # Verificar permisos de ejecuci√≥n
    executable_path = os.path.join(
        app_path, "Contents", "MacOS", "EDF_CatalogoDeTablas_Web_Native"
    )
    if os.path.exists(executable_path):
        if os.access(executable_path, os.X_OK):
            print("‚úÖ Permisos de ejecuci√≥n OK")
        else:
            print("‚ùå Sin permisos de ejecuci√≥n")
            print("üí° Ejecuta: chmod +x " + executable_path)

    # Verificar permisos de escritura en directorio temporal
    temp_dir = Path(tempfile.gettempdir()) / "edf_catalogo_logs"
    try:
        temp_dir.mkdir(exist_ok=True)
        test_file = temp_dir / "test_permissions.txt"
        test_file.write_text("test")  # pyright: ignore[reportUnusedCallResult]
        test_file.unlink()
        print("‚úÖ Permisos de escritura en directorio temporal OK")
    except Exception as e:
        print(f"‚ùå Error con permisos de escritura: {e}")


def check_dependencies():
    """Verificar dependencias"""
    print("\nüì¶ Verificando dependencias...")
    print("=" * 30)

    critical_modules = [
        "flask",
        "flask_login",
        "pymongo",
        "webview",
        "requests",
        "threading",
        "tempfile",
        "pathlib",
    ]

    missing_modules = []
    for module in critical_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError as e:
            print(f"‚ùå {module}: {e}")
            missing_modules.append(module)

    if missing_modules:
        print(f"\n‚ö†Ô∏è  M√≥dulos faltantes: {', '.join(missing_modules)}")
    else:
        print("\n‚úÖ Todas las dependencias cr√≠ticas disponibles")


def check_logs():
    """Verificar logs de la aplicaci√≥n"""
    print("\nüìù Verificando logs...")
    print("=" * 30)

    # Buscar logs recientes
    log_dirs = [
        Path(tempfile.gettempdir()) / "edf_catalogo_logs",
        Path.home() / "Library" / "Logs",
        Path.cwd() / "logs",
    ]

    for log_dir in log_dirs:
        if log_dir.exists():
            print(f"üìÅ Directorio de logs encontrado: {log_dir}")
            try:
                log_files = list(log_dir.glob("*.log"))
                if log_files:
                    for log_file in log_files[-3:]:  # √öltimos 3 archivos
                        print(f"   üìÑ {log_file.name}")
                        # Mostrar √∫ltimas l√≠neas del log
                        try:
                            with open(log_file, "r") as f:
                                lines = f.readlines()
                                if lines:
                                    last_line = lines[-1].strip()
                                    print(f"      √öltima l√≠nea: {last_line[:100]}...")
                        except Exception as e:
                            print(f"      ‚ùå Error al leer log: {e}")
                else:
                    print("   üìÑ No hay archivos de log")
            except Exception as e:
                print(f"   ‚ùå Error al listar logs: {e}")


def main():
    """Funci√≥n principal"""
    print("üîç DIAGN√ìSTICO DE PROBLEMAS DE APLICACI√ìN EMPAQUETADA")
    print("=" * 70)

    try:
        # Verificaciones b√°sicas
        if not check_app_launch():
            print("\n‚ùå Problema cr√≠tico: No se puede lanzar la aplicaci√≥n")
            return

        check_icon()
        check_permissions()
        check_dependencies()

        # Verificaciones de red
        if check_network_access():
            print("\n‚úÖ Servidor funcionando correctamente")
        else:
            print("\n‚ö†Ô∏è  Servidor no accesible - verificando logs...")
            check_logs()

        # Verificaci√≥n de servidor
        check_server_startup()

        print("\n" + "=" * 70)
        print("üìã RESUMEN DEL DIAGN√ìSTICO")
        print("=" * 70)
        print("‚úÖ Verificaciones completadas")
        print("\nüí° Si hay problemas:")
        print("   1. Verifica que la aplicaci√≥n tenga permisos de ejecuci√≥n")
        print("   2. Revisa los logs en el directorio temporal")
        print("   3. Aseg√∫rate de que el puerto 5004 est√© libre")
        print("   4. Verifica que todas las dependencias est√©n incluidas")
        print("\nüîß Para m√°s informaci√≥n:")
        print("   - Ejecuta la aplicaci√≥n desde terminal para ver errores")
        print("   - Revisa los logs del sistema")
        print("   - Verifica la configuraci√≥n de seguridad de macOS")

    except Exception as e:
        print(f"\n‚ùå Error durante el diagn√≥stico: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
