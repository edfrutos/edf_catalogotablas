#!/usr/bin/env python3
"""
Script de diagn√≥stico espec√≠fico para MongoDB en la aplicaci√≥n empaquetada
"""

import os
import sys
import tempfile  # pyright: ignore[reportUnusedImport]
from pathlib import Path  # pyright: ignore[reportUnusedImport]


def check_packaged_environment():
    """Verificar el entorno de la aplicaci√≥n empaquetada"""
    print("üîç Diagn√≥stico de MongoDB en aplicaci√≥n empaquetada")
    print("=" * 60)

    # Verificar si estamos empaquetados
    is_frozen = getattr(sys, "frozen", False)
    print(f"üì¶ Aplicaci√≥n empaquetada: {is_frozen}")

    if is_frozen:
        print(
            f"üìÅ Directorio base: {sys._MEIPASS}"  # pyright: ignore[reportAttributeAccessIssue]
        )
        env_path = os.path.join(
            sys._MEIPASS, ".env"  # pyright: ignore[reportAttributeAccessIssue]
        )
        if os.path.exists(env_path):
            print(f"‚úÖ Archivo .env encontrado: {env_path}")

            # Leer y mostrar la URI de MongoDB
            try:
                with open(env_path, "r") as f:  # noqa: UP015
                    content = f.read()
                    lines = content.split("\n")
                    for line in lines:
                        if line.startswith("MONGO_URI="):
                            mongo_uri = line.split("=", 1)[1]
                            print(f"üì° URI de MongoDB en .env: {mongo_uri[:60]}...")
                            break
            except Exception as e:
                print(f"‚ùå Error al leer .env: {e}")
        else:
            print(f"‚ùå Archivo .env no encontrado en: {env_path}")
    else:
        print("‚ö†Ô∏è  No estamos en una aplicaci√≥n empaquetada")

    # Verificar variables de entorno actuales
    print("\n‚öôÔ∏è  Variables de entorno actuales:")
    print("=" * 40)

    mongo_uri = os.environ.get("MONGO_URI")
    if mongo_uri:
        print(f"‚úÖ MONGO_URI: {mongo_uri[:60]}...")
    else:
        print("‚ùå MONGO_URI: No definida")

    # Intentar cargar .env manualmente
    print("\nüîÑ Intentando cargar .env manualmente...")
    print("=" * 40)

    try:
        from dotenv import load_dotenv

        load_dotenv()  # pyright: ignore[reportUnusedCallResult]
        print("‚úÖ load_dotenv() ejecutado")

        # Verificar si se carg√≥ la variable
        mongo_uri_after = os.environ.get("MONGO_URI")
        if mongo_uri_after:
            print(f"‚úÖ MONGO_URI despu√©s de load_dotenv: {mongo_uri_after[:60]}...")
        else:
            print("‚ùå MONGO_URI a√∫n no definida despu√©s de load_dotenv")

    except ImportError:
        print("‚ùå python-dotenv no disponible")
    except Exception as e:
        print(f"‚ùå Error al cargar .env: {e}")


def test_mongodb_connection():
    """Probar conexi√≥n a MongoDB con la configuraci√≥n actual"""
    print("\nüîç Probando conexi√≥n a MongoDB...")
    print("=" * 40)

    mongo_uri = os.environ.get("MONGO_URI")
    if not mongo_uri:
        print("‚ùå MONGO_URI no disponible para la prueba")
        return False

    try:
        from pymongo import MongoClient

        print(f"üì° Conectando con URI: {mongo_uri[:60]}...")

        client = MongoClient(mongo_uri, serverSelectionTimeoutMS=10000)
        client.admin.command("ping")  # pyright: ignore[reportUnusedCallResult]

        db = client.get_database()
        print("‚úÖ Conexi√≥n exitosa a MongoDB Atlas")
        print(f"üìä Base de datos: {db.name}")

        # Listar colecciones
        collections = db.list_collection_names()
        print(f"üìã Colecciones disponibles: {len(collections)}")

        client.close()
        return True

    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False


def main():
    """Funci√≥n principal"""
    print("üîç DIAGN√ìSTICO MONGODB EN APLICACI√ìN EMPAQUETADA")
    print("=" * 70)

    try:
        # Verificar entorno
        check_packaged_environment()

        # Probar conexi√≥n
        if test_mongodb_connection():
            print("\nüéâ ¬°Conexi√≥n a MongoDB exitosa!")
            print("‚úÖ La aplicaci√≥n deber√≠a funcionar correctamente")
        else:
            print("\n‚ùå Problemas con la conexi√≥n a MongoDB")
            print("üîß Revisa la configuraci√≥n")

        print("\nüìã Resumen:")
        print("   ‚Ä¢ Verifica que el archivo .env est√© incluido en la aplicaci√≥n")
        print("   ‚Ä¢ Confirma que load_dotenv() se ejecute correctamente")
        print("   ‚Ä¢ Aseg√∫rate de que la URI de MongoDB Atlas sea correcta")

    except Exception as e:
        print(f"\n‚ùå Error durante el diagn√≥stico: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    main()
