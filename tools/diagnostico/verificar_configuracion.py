#!/usr/bin/env python3
# Script: verificar_configuracion.py
# Descripci√≥n: Verifica que la configuraci√≥n de Python e IntelliCode est√© correcta
# Autor: EDF Developer - 2025-01-XX

import os
import sys
import json
from pathlib import Path


def verificar_configuracion():
    print("üîç VERIFICACI√ìN DE CONFIGURACI√ìN PYTHON + INTELLICODE")
    print("=" * 60)

    # Verificar directorio .vscode
    vscode_dir = Path(".vscode")
    if not vscode_dir.exists():
        print("‚ùå Directorio .vscode no encontrado")
        return False

    print("‚úÖ Directorio .vscode encontrado")

    # Verificar settings.json
    settings_file = vscode_dir / "settings.json"
    if not settings_file.exists():
        print("‚ùå Archivo settings.json no encontrado")
        return False

    print("‚úÖ Archivo settings.json encontrado")

    # Leer y verificar settings.json
    try:
        with open(settings_file, "r", encoding="utf-8") as f:
            settings = json.load(f)
    except Exception as e:
        print(f"‚ùå Error al leer settings.json: {e}")
        return False

    # Verificar configuraci√≥n del int√©rprete Python
    python_path = settings.get("python.defaultInterpreterPath", "")
    if python_path:
        if python_path.startswith("./venv310/bin/python"):
            print("‚úÖ Int√©rprete Python configurado correctamente (ruta relativa)")
        else:
            print(f"‚ö†Ô∏è  Int√©rprete Python configurado: {python_path}")
    else:
        print("‚ùå Int√©rprete Python no configurado")

    # Verificar modo de verificaci√≥n de tipos
    type_checking = settings.get("python.analysis.typeCheckingMode", "")
    if type_checking:
        print(f"‚úÖ Modo de verificaci√≥n de tipos: {type_checking}")
    else:
        print("‚ùå Modo de verificaci√≥n de tipos no configurado")

    # Verificar configuraci√≥n de IntelliCode
    intellicode_configs = [
        "intellicode.python.deepLearning",
        "intellicode.completions.enabled",
        "intellicode.insights.enabled",
    ]

    print("\nüîß CONFIGURACI√ìN INTELLICODE:")
    for config in intellicode_configs:
        value = settings.get(config, "no configurado")
        if value != "no configurado":
            print(f"‚úÖ {config}: {value}")
        else:
            print(f"‚ùå {config}: no configurado")

    # Verificar extensiones
    extensions_file = vscode_dir / "extensions.json"
    if extensions_file.exists():
        try:
            with open(extensions_file, "r", encoding="utf-8") as f:
                extensions = json.load(f)

            print("\nüì¶ EXTENSIONES RECOMENDADAS:")
            for ext in extensions.get("recommendations", []):
                if ext.startswith("ms-python."):
                    print(f"‚úÖ {ext}")
        except Exception as e:
            print(f"‚ùå Error al leer extensions.json: {e}")

    # Verificar entorno virtual
    venv_path = Path("venv310")
    if venv_path.exists():
        python_exe = venv_path / "bin" / "python"
        if python_exe.exists():
            print(f"\n‚úÖ Entorno virtual encontrado: {venv_path}")
            print(f"‚úÖ Python del entorno: {python_exe}")
        else:
            print(f"‚ùå Python no encontrado en {python_exe}")
    else:
        print(f"‚ùå Entorno virtual no encontrado en {venv_path}")

    print("\nüéØ RECOMENDACIONES:")
    print("1. Reinicia VS Code/Cursor despu√©s de aplicar los cambios")
    print("2. Verifica que el int√©rprete Python est√© correctamente configurado")
    print("3. Aseg√∫rate de que las extensiones est√©n instaladas")
    print("4. Revisa la ventana de salida 'Python' para errores espec√≠ficos")
    print("5. Revisa la ventana de salida 'VS IntelliCode' para errores espec√≠ficos")

    return True


if __name__ == "__main__":
    verificar_configuracion()
