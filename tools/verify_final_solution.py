#!/usr/bin/env python3
"""
Script de verificaci√≥n final para confirmar que la soluci√≥n funciona
"""

import os
import time

import requests
from pymongo import MongoClient


def verify_environment_variables():
    """Verificar que las variables de entorno se cargan correctamente"""
    print("üîç Verificando variables de entorno...")
    print("=" * 50)

    # Cargar variables de entorno
    try:
        from dotenv import load_dotenv

        load_dotenv(override=True)  # pyright: ignore[reportUnusedCallResult]
        print("‚úÖ Variables de entorno cargadas con override=True")
    except Exception as e:
        print(f"‚ùå Error al cargar variables de entorno: {e}")
        return False

    # Verificar MONGO_URI
    mongo_uri = os.environ.get("MONGO_URI")
    if mongo_uri:
        if "cluster0.abpvipa.mongodb.net" in mongo_uri:
            print("‚úÖ MONGO_URI correcta (nueva URI)")
            print(f"üì° URI: {mongo_uri[:60]}...")
            return True
        else:
            print("‚ùå MONGO_URI incorrecta (URI anterior)")
            print(f"üì° URI: {mongo_uri[:60]}...")
            return False
    else:
        print("‚ùå MONGO_URI no definida")
        return False


def verify_mongodb_connection():
    """Verificar conexi√≥n a MongoDB Atlas"""
    print("\nüîç Verificando conexi√≥n a MongoDB Atlas...")
    print("=" * 50)

    mongo_uri = os.environ.get("MONGO_URI")
    if not mongo_uri:
        print("‚ùå MONGO_URI no disponible")
        return False

    try:
        client = MongoClient(mongo_uri, serverSelectionTimeoutMS=10000)
        client.admin.command("ping")  # pyright: ignore[reportUnusedCallResult]

        db = client.get_database()
        print("‚úÖ Conexi√≥n exitosa a MongoDB Atlas")
        print(f"üìä Base de datos: {db.name}")

        # Listar colecciones
        collections = db.list_collection_names()
        print(f"üìã Colecciones disponibles: {len(collections)}")

        client.close()
        return True

    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False


def verify_flask_server():
    """Verificar que el servidor Flask est√© funcionando"""
    print("\nüåê Verificando servidor Flask...")
    print("=" * 40)

    try:
        # Esperar un poco para que el servidor se inicie
        time.sleep(2)

        response = requests.get("http://127.0.0.1:5004", timeout=5)
        if response.status_code in [200, 302]:
            print("‚úÖ Servidor Flask funcionando correctamente")
            print(f"üìä Status code: {response.status_code}")
            return True
        else:
            print(f"‚ö†Ô∏è  Servidor responde con status: {response.status_code}")
            return False

    except requests.exceptions.ConnectionError:
        print("‚ùå Servidor Flask no accesible")
        return False
    except Exception as e:
        print(f"‚ùå Error al conectar con Flask: {e}")
        return False


def verify_app_files():
    """Verificar archivos cr√≠ticos de la aplicaci√≥n"""
    print("\nüìÅ Verificando archivos cr√≠ticos...")
    print("=" * 40)

    critical_files = ["wsgi.py", "config.py", ".env", "launcher_native_websockets.py"]

    all_present = True
    for file in critical_files:
        if os.path.exists(file):
            size = os.path.getsize(file)
            print(f"‚úÖ {file}: {size} bytes")
        else:
            print(f"‚ùå {file}: No encontrado")
            all_present = False

    return all_present


def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üîç VERIFICACI√ìN FINAL DE LA SOLUCI√ìN")
    print("=" * 60)

    checks = [
        ("Variables de entorno", verify_environment_variables),
        ("Archivos cr√≠ticos", verify_app_files),
        ("Conexi√≥n MongoDB", verify_mongodb_connection),
        ("Servidor Flask", verify_flask_server),
    ]

    results = []

    for check_name, check_function in checks:
        try:
            result = check_function()
            results.append((check_name, result))
        except Exception as e:
            print(f"‚ùå Error en verificaci√≥n '{check_name}': {e}")
            results.append((check_name, False))

    print("\n" + "=" * 60)
    print("üìã RESUMEN DE VERIFICACI√ìN")
    print("=" * 60)

    all_passed = True
    for check_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{status} - {check_name}")
        if not result:
            all_passed = False

    print("\n" + "=" * 60)
    if all_passed:
        print("üéâ ¬°TODAS LAS VERIFICACIONES PASARON!")
        print("‚úÖ La aplicaci√≥n est√° lista para usar")
        print("\nüì± Para ejecutar la aplicaci√≥n:")
        print("   open dist/EDF_CatalogoDeTablas_Web_Native.app")
        print("\nüí° La aplicaci√≥n ahora deber√≠a funcionar sin errores de MongoDB")
    else:
        print("‚ö†Ô∏è  ALGUNAS VERIFICACIONES FALLARON")
        print("üîß Revisa los errores antes de usar la aplicaci√≥n")

    print("\nüí° Informaci√≥n adicional:")
    print("   ‚Ä¢ MongoDB Atlas: Conectado correctamente")
    print("   ‚Ä¢ Variables de entorno: Cargadas con override=True")
    print("   ‚Ä¢ Servidor Flask: Puerto 5004")
    print("   ‚Ä¢ Icono personalizado: Incluido en la aplicaci√≥n")
    print("   ‚Ä¢ Problema de credenciales: RESUELTO")


if __name__ == "__main__":
    main()
