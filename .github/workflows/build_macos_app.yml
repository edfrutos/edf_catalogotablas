# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build macOS App v2.0

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure secrets and environment
        run: |
          echo "🔧 Configurando secrets y variables de entorno..."
          
          # Crear directorio app_data si no existe
          mkdir -p app_data
          
          # Crear archivo de configuración con secrets
          cat > app_data/edefrutos2025_notifications_config.json << EOF
          {
            "enabled": true,
            "smtp": {
              "server": "smtp-relay.brevo.com",
              "port": 587,
              "username": "${{ secrets.BREVO_SMTP_USERNAME }}",
              "password": "${{ secrets.BREVO_SMTP_PASSWORD }}",
              "use_tls": true
            },
            "brevo_api": {
              "api_key": "${{ secrets.BREVO_API_KEY }}",
              "sender_name": "Administrador",
              "sender_email": "no-reply@edefrutos2025.xyz"
            },
            "use_api": true,
            "recipients": [
              "${{ secrets.NOTIFICATION_EMAIL_1 }}",
              "${{ secrets.NOTIFICATION_EMAIL_2 }}"
            ],
            "thresholds": {
              "cpu": 80,
              "memory": 90,
              "disk": 85,
              "error_rate": 5
            },
            "cooldown_minutes": 60,
            "last_alerts": {}
          }
          EOF
          
          # Crear archivo .env con variables de entorno
          cat > .env << EOF
          MONGO_URI=${{ secrets.MONGO_URI }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          BREVO_API_KEY=${{ secrets.BREVO_API_KEY }}
          BREVO_SMTP_USERNAME=${{ secrets.BREVO_SMTP_USERNAME }}
          BREVO_SMTP_PASSWORD=${{ secrets.BREVO_SMTP_PASSWORD }}
          EOF
          
          echo "✅ Secrets y variables de entorno configurados"

      - name: Verify checkout
        run: |
          echo "🔍 Verificando checkout del código..."
          echo "📁 Directorio actual: $(pwd)"
          echo "📋 Archivos en el directorio raíz:"
          ls -la
          echo "📋 Archivos requirements:"
          ls -la requirements*.txt || echo "No hay archivos requirements"
          echo "✅ Verificación de checkout completada"

      - name: Verify workflow version and connectivity
        run: |
          echo "🔍 Verificando versión del workflow y conectividad..."
          echo "Workflow: Build macOS App v2.0"
          echo "Fecha: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          
          # Verificar el commit actual
          echo "📋 Información del commit actual:"
          git log --oneline -1
          git status --porcelain
          
          # Verificar conectividad básica
          echo "🌐 Verificando conectividad..."
          if ping -c 3 pypi.org > /dev/null 2>&1; then
            echo "✅ Conectividad con PyPI OK"
          else
            echo "⚠️  Problemas de conectividad con PyPI"
          fi
          
          if ping -c 3 github.com > /dev/null 2>&1; then
            echo "✅ Conectividad con GitHub OK"
          else
            echo "⚠️  Problemas de conectividad con GitHub"
          fi
          
          echo "✅ Verificación completada"

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          check-latest: false
        timeout-minutes: 15

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Verify and create requirements file
        run: |
          echo "🔍 Verificando y creando archivo requirements_python310.txt..."
          echo "📋 Archivos en el directorio actual:"
          ls -la
          echo "📋 Archivos .txt en el directorio:"
          ls -la *.txt || echo "No hay archivos .txt"
          echo "📋 Archivos requirements:"
          ls -la requirements*.txt || echo "No hay archivos requirements"
          
          # Ejecutar script de verificación de requirements
          if [ -f "verify_requirements.sh" ]; then
            echo "🔧 Ejecutando script de verificación de requirements..."
            chmod +x verify_requirements.sh
            ./verify_requirements.sh
          else
            echo "⚠️  Script verify_requirements.sh no encontrado, usando método manual..."
            
            if [ ! -f "requirements_python310.txt" ]; then
              echo "❌ ERROR: requirements_python310.txt no encontrado"
              echo "🔧 Intentando crear el archivo desde requirements.txt..."
              
              if [ -f "requirements.txt" ]; then
                echo "📋 Copiando requirements.txt a requirements_python310.txt..."
                cp requirements.txt requirements_python310.txt
                echo "✅ Archivo creado desde requirements.txt"
              else
                echo "❌ ERROR: requirements.txt tampoco encontrado"
                echo "🔧 Creando archivo requirements_python310.txt básico..."
                echo "flask==3.0.0" > requirements_python310.txt
                echo "pymongo==4.6.0" >> requirements_python310.txt
                echo "boto3==1.34.0" >> requirements_python310.txt
                echo "pandas==2.1.0" >> requirements_python310.txt
                echo "openpyxl==3.1.2" >> requirements_python310.txt
                echo "python-dotenv==1.0.0" >> requirements_python310.txt
                echo "werkzeug==3.0.1" >> requirements_python310.txt
                echo "jinja2==3.1.2" >> requirements_python310.txt
                echo "markupsafe==2.1.3" >> requirements_python310.txt
                echo "itsdangerous==2.1.2" >> requirements_python310.txt
                echo "click==8.1.7" >> requirements_python310.txt
                echo "cryptography==41.0.7" >> requirements_python310.txt
                echo "Pillow==10.1.0" >> requirements_python310.txt
                echo "psutil==5.9.6" >> requirements_python310.txt
                echo "pywebview==5.0.7" >> requirements_python310.txt
                echo "requests==2.31.0" >> requirements_python310.txt
                echo "websockets==12.0" >> requirements_python310.txt
                echo "✅ Archivo requirements_python310.txt creado con dependencias básicas"
              fi
            else
              echo "✅ requirements_python310.txt encontrado"
            fi
          fi

      - name: Install dependencies
        run: |
          echo "📦 Instalando dependencias..."
          pip install --upgrade pip
          pip install -r requirements_python310.txt
          echo "✅ Dependencias instaladas"

      - name: Verify and create .spec file
        run: |
          echo "🔍 Verificando archivo .spec..."
          
          # Verificar si existe el archivo .spec correcto
          if [ -f "EDF_CatalogoDeTablas_Native_WebSockets.spec" ]; then
            echo "✅ EDF_CatalogoDeTablas_Native_WebSockets.spec encontrado"
            echo "📏 Tamaño del archivo: $(wc -l < EDF_CatalogoDeTablas_Native_WebSockets.spec) líneas"
            echo "📋 Primeras 10 líneas:"
            head -10 EDF_CatalogoDeTablas_Native_WebSockets.spec
            echo "✅ Verificación completada"
            exit 0
          fi
          
          # Si no existe, intentar ejecutar el script de verificación
          if [ -f "create_safe_spec.sh" ]; then
            echo "🔧 Ejecutando script de creación de .spec seguro..."
            chmod +x create_safe_spec.sh
            ./create_safe_spec.sh
          elif [ -f "verify_spec.sh" ]; then
            echo "🔧 Ejecutando script de verificación de spec..."
            chmod +x verify_spec.sh
            ./verify_spec.sh
          else
            echo "⚠️  Script verify_spec.sh no encontrado, creando archivo manualmente..."
            
            # Crear archivo .spec simplificado para evitar errores en GitHub Actions
            echo "# -*- mode: python ; coding: utf-8 -*-" > "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "block_cipher = None" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "a = Analysis(" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    ['launcher_native_websockets.py']," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    pathex=[]," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    binaries=[]," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    datas=[" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        ('app', 'app')," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        ('config.py', '.')," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        ('wsgi.py', '.')," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        ('.env', '.')," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        ('requirements.txt', '.')," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    ]," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    hiddenimports=[" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'flask', 'flask_login', 'flask_session', 'pymongo', 'requests'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'webview', 'werkzeug', 'jinja2', 'markupsafe', 'itsdangerous'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'click', 'blinker', 'boto3', 'botocore', 's3transfer'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'jmespath', 'python_dateutil', 'urllib3', 'certifi'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'charset_normalizer', 'idna', 'six', 'websockets'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'asyncio', 'threading', 'tempfile', 'pathlib', 'datetime'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'json', 'os', 'sys', 'time'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    ]," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    hookspath=[]," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    hooksconfig={}," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    runtime_hooks=[]," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    excludes=[]," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    win_no_prefer_redirects=False," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    win_private_assemblies=False," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    cipher=block_cipher," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    noarchive=False," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo ")" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "exe = EXE(" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    pyz," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    a.scripts," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    []," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    exclude_binaries=True," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    name='EDF_CatalogoDeTablas_Web_Native'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    debug=False," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    bootloader_ignore_signals=False," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    strip=False," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    upx=True," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    console=False," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    disable_windowed_traceback=False," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    argv_emulation=False," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    target_arch=None," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    codesign_identity=None," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    entitlements_file=None," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo ")" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "coll = COLLECT(" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    exe," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    a.binaries," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    a.zipfiles," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    a.datas," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    strip=False," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    upx=True," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    upx_exclude=[]," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    name='EDF_CatalogoDeTablas_Web_Native'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo ")" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "app = BUNDLE(" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    coll," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    name='EDF_CatalogoDeTablas_Web_Native.app'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    icon=None," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    bundle_identifier='com.edefrutos.catalogodetablas.websockets'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    info_plist={" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'CFBundleName': 'EDF Catálogo de Tablas WebSockets'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'CFBundleDisplayName': 'EDF Catálogo de Tablas'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'CFBundleVersion': '1.0.0'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'CFBundleShortVersionString': '1.0.0'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'CFBundleExecutable': 'EDF_CatalogoDeTablas_Web_Native'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'CFBundlePackageType': 'APPL'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'CFBundleSignature': '????'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'LSMinimumSystemVersion': '10.13.0'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'NSHighResolutionCapable': True," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'NSRequiresAquaSystemAppearance': False," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "        'LSApplicationCategoryType': 'public.app-category.productivity'," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo "    }," >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            echo ")" >> "EDF_CatalogoDeTablas_Native_WebSockets.spec"
            
            echo "✅ Archivo EDF_CatalogoDeTablas_Native_WebSockets.spec creado manualmente"
            echo "📏 Tamaño del archivo: $(wc -l < EDF_CatalogoDeTablas_Native_WebSockets.spec) líneas"
            echo "📋 Primeras 10 líneas:"
            head -10 EDF_CatalogoDeTablas_Native_WebSockets.spec
          fi
          
          echo "✅ Verificación completada"
          
      - name: Verify requirements file
        run: |
          echo "🔍 Verificando archivo requirements..."
          ls -la requirements_python310.txt
          echo "📋 Contenido del archivo:"
          head -10 requirements_python310.txt
          echo "✅ Verificación de requirements completada"

      - name: Build App
        run: |
          echo "🔨 Iniciando construcción de la aplicación..."
          
          # Verificación final antes del build
          if [ -f "pre_build_final_check.sh" ]; then
            echo "🔍 Ejecutando verificación final pre-build..."
            chmod +x pre_build_final_check.sh
            ./pre_build_final_check.sh
          fi
          
          # Intentar usar el script de build mejorado si existe
          if [ -f "build_macos_app.sh" ]; then
            echo "🔧 Usando script de build mejorado..."
            chmod +x build_macos_app.sh
            ./build_macos_app.sh
          else
            echo "⚠️  Script build_macos_app.sh no encontrado, usando PyInstaller directamente..."
            python -m PyInstaller EDF_CatalogoDeTablas_Native_WebSockets.spec --clean
          fi
          
          echo "✅ Construcción completada"

      - name: Verify build output
        run: |
          echo "Verificando salida de construcción..."
          ls -la dist/
          ls -la dist/EDF_CatalogoDeTablas_Web_Native.app/Contents/MacOS/ || echo "Aplicación no construida correctamente"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: EDF_CatalogoDeTablas_Web_Native.app
          path: dist/EDF_CatalogoDeTablas_Web_Native.app
          retention-days: 30

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs
          path: |
            dist/
            build/
          retention-days: 7
