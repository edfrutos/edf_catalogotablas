name: Build macOS App v2.0

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify checkout
        run: |
          echo "🔍 Verificando checkout del código..."
          echo "📁 Directorio actual: $(pwd)"
          echo "📋 Archivos en el directorio raíz:"
          ls -la
          echo "📋 Archivos requirements:"
          ls -la requirements*.txt || echo "No hay archivos requirements"
          echo "✅ Verificación de checkout completada"

      - name: Verify workflow version and connectivity
        run: |
          echo "🔍 Verificando versión del workflow y conectividad..."
          echo "Workflow: Build macOS App v2.0"
          echo "Fecha: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          
          # Verificar el commit actual
          echo "📋 Información del commit actual:"
          git log --oneline -1
          git status --porcelain
          
          # Verificar conectividad básica
          echo "🌐 Verificando conectividad..."
          if ping -c 3 pypi.org > /dev/null 2>&1; then
            echo "✅ Conectividad con PyPI OK"
          else
            echo "⚠️  Problemas de conectividad con PyPI"
          fi
          
          if ping -c 3 github.com > /dev/null 2>&1; then
            echo "✅ Conectividad con GitHub OK"
          else
            echo "⚠️  Problemas de conectividad con GitHub"
          fi
          
          echo "✅ Verificación completada"

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          check-latest: false
        timeout-minutes: 15

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Verify and create requirements file
        run: |
          echo "🔍 Verificando y creando archivo requirements_python310.txt..."
          echo "📋 Archivos en el directorio actual:"
          ls -la
          echo "📋 Archivos .txt en el directorio:"
          ls -la *.txt || echo "No hay archivos .txt"
          echo "📋 Archivos requirements:"
          ls -la requirements*.txt || echo "No hay archivos requirements"
          
          # Ejecutar script de verificación de requirements
          if [ -f "verify_requirements.sh" ]; then
            echo "🔧 Ejecutando script de verificación de requirements..."
            chmod +x verify_requirements.sh
            ./verify_requirements.sh
          else
            echo "⚠️  Script verify_requirements.sh no encontrado, usando método manual..."
            
            if [ ! -f "requirements_python310.txt" ]; then
              echo "❌ ERROR: requirements_python310.txt no encontrado"
              echo "🔧 Intentando crear el archivo desde requirements.txt..."
              
              if [ -f "requirements.txt" ]; then
                echo "📋 Copiando requirements.txt a requirements_python310.txt..."
                cp requirements.txt requirements_python310.txt
                echo "✅ Archivo creado desde requirements.txt"
              else
                echo "❌ ERROR: requirements.txt tampoco existe"
                echo "🔧 Creando archivo requirements_python310.txt básico..."
                echo "# Requirements para Python 3.10" > requirements_python310.txt
                echo "Flask==2.3.3" >> requirements_python310.txt
                echo "pymongo==4.5.0" >> requirements_python310.txt
                echo "boto3==1.28.44" >> requirements_python310.txt
                echo "pandas==2.0.3" >> requirements_python310.txt
                echo "openpyxl==3.1.2" >> requirements_python310.txt
                echo "python-dotenv==1.0.0" >> requirements_python310.txt
                echo "Werkzeug==2.3.7" >> requirements_python310.txt
                echo "✅ Archivo requirements_python310.txt creado con dependencias básicas"
              fi
            fi
          fi
          
          echo "✅ requirements_python310.txt verificado/creado"
          echo "📏 Tamaño del archivo: $(wc -l < requirements_python310.txt) líneas"
          echo "📋 Primeras 5 líneas:"
          head -5 requirements_python310.txt

      - name: Install dependencies with retry
        run: |
          echo "📦 Instalando dependencias con reintentos..."
          
          # Función para instalar con reintentos
          install_with_retry() {
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "🔄 Intento $attempt de $max_attempts..."
              
              if python -m pip install --upgrade pip; then
                echo "✅ pip actualizado correctamente"
                break
              else
                echo "❌ Error en intento $attempt"
                if [ $attempt -eq $max_attempts ]; then
                  echo "🚫 Falló después de $max_attempts intentos"
                  exit 1
                fi
                echo "⏳ Esperando 10 segundos antes del siguiente intento..."
                sleep 10
                attempt=$((attempt + 1))
              fi
            done
          }
          
          # Actualizar pip con reintentos
          install_with_retry
          
          # Instalar requirements con reintentos
          echo "📋 Instalando desde requirements_python310.txt..."
          for attempt in 1 2 3; do
            echo "🔄 Intento $attempt de 3 para requirements..."
            if pip install -r requirements_python310.txt; then
              echo "✅ Requirements instalados correctamente"
              break
            else
              echo "❌ Error en intento $attempt"
              if [ $attempt -eq 3 ]; then
                echo "🚫 Falló después de 3 intentos"
                exit 1
              fi
              echo "⏳ Esperando 15 segundos antes del siguiente intento..."
              sleep 15
            fi
          done
          
          # Instalar PyInstaller con reintentos
          echo "🔧 Instalando PyInstaller..."
          for attempt in 1 2 3; do
            echo "🔄 Intento $attempt de 3 para PyInstaller..."
            if pip install pyinstaller==6.15.0 pyinstaller-hooks-contrib==2025.8; then
              echo "✅ PyInstaller instalado correctamente"
              break
            else
              echo "❌ Error en intento $attempt"
              if [ $attempt -eq 3 ]; then
                echo "🚫 Falló después de 3 intentos"
                exit 1
              fi
              echo "⏳ Esperando 10 segundos antes del siguiente intento..."
              sleep 10
            fi
          done
          
          # Instalar pywebview con reintentos
          echo "🌐 Instalando pywebview..."
          for attempt in 1 2 3; do
            echo "🔄 Intento $attempt de 3 para pywebview..."
            if pip install pywebview; then
              echo "✅ pywebview instalado correctamente"
              break
            else
              echo "❌ Error en intento $attempt"
              if [ $attempt -eq 3 ]; then
                echo "🚫 Falló después de 3 intentos"
                exit 1
              fi
              echo "⏳ Esperando 10 segundos antes del siguiente intento..."
              sleep 10
            fi
          done
          
          echo "✅ Todas las dependencias instaladas correctamente"

      - name: Setup environment variables (non-sensitive)
        run: |
          echo "🔧 Configurando variables de entorno no sensibles..."
          cat > .env << EOF
          FLASK_ENV=production
          APP_VERSION=1.0.0
          BUILD_DATE=$(date +%Y-%m-%d)
          EOF
          echo "✅ Variables de entorno no sensibles configuradas"

      - name: Create placeholder credentials
        run: |
          echo "📝 Creando archivos de credenciales de ejemplo..."
          mkdir -p tools/db_utils
          cat > tools/db_utils/credentials.json.example << 'EOF'
          {
            "installed": {
              "client_id": "your-client-id.apps.googleusercontent.com",
              "project_id": "your-project-id",
              "auth_uri": "https://accounts.google.com/o/oauth2/auth",
              "token_uri": "https://oauth2.googleapis.com/token",
              "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
              "client_secret": "your-client-secret",
              "redirect_uris": ["http://localhost:8080/"]
            }
          }
          EOF
          echo "✅ Archivos de ejemplo creados"

      - name: Clean previous builds and resolve PyInstaller conflicts
        run: |
          echo "🧹 Limpiando builds anteriores y resolviendo conflictos de PyInstaller..."
          
          # Ejecutar script de limpieza pre-build si existe
          if [ -f "pre_build_cleanup.sh" ]; then
            echo "🔧 Ejecutando script de limpieza pre-build para CI/CD..."
            chmod +x pre_build_cleanup.sh
            ./pre_build_cleanup.sh
          elif [ -f "ci_fix_pyinstaller.sh" ]; then
            echo "🔧 Ejecutando script de resolución de conflictos para CI/CD..."
            chmod +x ci_fix_pyinstaller.sh
            ./ci_fix_pyinstaller.sh
          else
            echo "⚠️  Scripts de limpieza no encontrados, usando limpieza manual..."
            rm -rf dist/ build/ || true
            find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
            find . -name "*.pyc" -delete 2>/dev/null || true
            find . -name ".mypy_cache" -type d -exec rm -rf {} + 2>/dev/null || true
            find . -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true
            
            # Eliminar archivos conflictivos específicos
            rm -f tools 2>/dev/null || true
            rm -f dist/EDF_CatalogoDeTablas.app/Contents/Frameworks/tools 2>/dev/null || true
            
            # Buscar y eliminar archivos 'tools' conflictivos
            find . -name "tools" -type f -delete 2>/dev/null || true
          fi
          
          echo "✅ Limpieza completa y resolución de conflictos completada"
          
          # Verificar que el entorno está listo para el build
          if [ -f "verify_build_environment.sh" ]; then
            echo "🔍 Verificando que el entorno está listo para el build..."
            chmod +x verify_build_environment.sh
            ./verify_build_environment.sh
          fi

      - name: Verify and create spec file
        run: |
          echo "🔍 Verificando y creando archivo .spec..."
          echo "📋 Archivos en el directorio actual:"
          ls -la
          echo "📋 Archivos .spec en el directorio:"
          ls -la *.spec || echo "No hay archivos .spec"
          
          # Verificar si el archivo principal existe
          if [ -f "EDF_CatalogoDeTablas.spec" ]; then
            echo "✅ EDF_CatalogoDeTablas.spec encontrado"
            echo "📏 Tamaño del archivo: $(wc -l < EDF_CatalogoDeTablas.spec) líneas"
            echo "📋 Primeras 10 líneas:"
            head -10 EDF_CatalogoDeTablas.spec
            echo "✅ Verificación completada"
            exit 0
          fi
          
          # Si no existe, intentar ejecutar el script de verificación
          if [ -f "verify_spec.sh" ]; then
            echo "🔧 Ejecutando script de verificación de spec..."
            chmod +x verify_spec.sh
            ./verify_spec.sh
          else
            echo "⚠️  Script verify_spec.sh no encontrado, creando archivo manualmente..."
            
            # Crear archivo .spec básico usando echo para evitar problemas de YAML
            echo "# -*- mode: python ; coding: utf-8 -*-" > "EDF_CatalogoDeTablas.spec"
            echo "" >> "EDF_CatalogoDeTablas.spec"
            echo "block_cipher = None" >> "EDF_CatalogoDeTablas.spec"
            echo "" >> "EDF_CatalogoDeTablas.spec"
            echo "a = Analysis(" >> "EDF_CatalogoDeTablas.spec"
            echo "    ['run_server.py']," >> "EDF_CatalogoDeTablas.spec"
            echo "    pathex=[]," >> "EDF_CatalogoDeTablas.spec"
            echo "    binaries=[]," >> "EDF_CatalogoDeTablas.spec"
            echo "    datas=[" >> "EDF_CatalogoDeTablas.spec"
            echo "        ('app/templates', 'app/templates')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('app/static', 'app/static')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('app/routes', 'app/routes')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/db_utils', 'app_tools/db_utils')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/utils', 'app_tools/utils')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/maintenance', 'app_tools/maintenance')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/monitoring', 'app_tools/monitoring')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/Admin Utils', 'app_tools/Admin Utils')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/Scripts Principales', 'app_tools/Scripts Principales')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/Users Tools', 'app_tools/Users Tools')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/Test Scripts', 'app_tools/Test Scripts')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/testing', 'app_tools/testing')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/image_utils', 'app_tools/image_utils')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/local', 'app_tools/local')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/macOS', 'app_tools/macOS')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/production', 'app_tools/production')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/system', 'app_tools/system')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('tools/src', 'app_tools/src')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('config', 'config')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('requirements_python310.txt', '.')," >> "EDF_CatalogoDeTablas.spec"
            echo "        ('.env', '.')," >> "EDF_CatalogoDeTablas.spec"
            echo "    ]," >> "EDF_CatalogoDeTablas.spec"
            echo "    hiddenimports=[" >> "EDF_CatalogoDeTablas.spec"
            echo "        'flask'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'pymongo'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'boto3'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'pandas'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'openpyxl'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'dotenv'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'werkzeug'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'jinja2'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'markupsafe'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'itsdangerous'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'click'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'cryptography'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'PIL'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'psutil'," >> "EDF_CatalogoDeTablas.spec"
            echo "        'pywebview'," >> "EDF_CatalogoDeTablas.spec"
            echo "    ]," >> "EDF_CatalogoDeTablas.spec"
            echo "    hookspath=[]," >> "EDF_CatalogoDeTablas.spec"
            echo "    hooksconfig={}," >> "EDF_CatalogoDeTablas.spec"
            echo "    runtime_hooks=[]," >> "EDF_CatalogoDeTablas.spec"
            echo "    excludes=[]," >> "EDF_CatalogoDeTablas.spec"
            echo "    win_no_prefer_redirects=False," >> "EDF_CatalogoDeTablas.spec"
            echo "    win_private_assemblies=False," >> "EDF_CatalogoDeTablas.spec"
            echo "    cipher=block_cipher," >> "EDF_CatalogoDeTablas.spec"
            echo "    noarchive=False," >> "EDF_CatalogoDeTablas.spec"
            echo ")" >> "EDF_CatalogoDeTablas.spec"
            echo "" >> "EDF_CatalogoDeTablas.spec"
            echo "pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)" >> "EDF_CatalogoDeTablas.spec"
            echo "" >> "EDF_CatalogoDeTablas.spec"
            echo "exe = EXE(" >> "EDF_CatalogoDeTablas.spec"
            echo "    pyz," >> "EDF_CatalogoDeTablas.spec"
            echo "    a.scripts," >> "EDF_CatalogoDeTablas.spec"
            echo "    []," >> "EDF_CatalogoDeTablas.spec"
            echo "    exclude_binaries=True," >> "EDF_CatalogoDeTablas.spec"
            echo "    name='EDF_CatalogoDeTablas'," >> "EDF_CatalogoDeTablas.spec"
            echo "    debug=False," >> "EDF_CatalogoDeTablas.spec"
            echo "    bootloader_ignore_signals=False," >> "EDF_CatalogoDeTablas.spec"
            echo "    strip=False," >> "EDF_CatalogoDeTablas.spec"
            echo "    upx=True," >> "EDF_CatalogoDeTablas.spec"
            echo "    console=True," >> "EDF_CatalogoDeTablas.spec"
            echo "    disable_windowed_traceback=False," >> "EDF_CatalogoDeTablas.spec"
            echo "    argv_emulation=False," >> "EDF_CatalogoDeTablas.spec"
            echo "    target_arch=None," >> "EDF_CatalogoDeTablas.spec"
            echo "    codesign_identity=None," >> "EDF_CatalogoDeTablas.spec"
            echo "    entitlements_file=None," >> "EDF_CatalogoDeTablas.spec"
            echo ")" >> "EDF_CatalogoDeTablas.spec"
            echo "" >> "EDF_CatalogoDeTablas.spec"
            echo "coll = COLLECT(" >> "EDF_CatalogoDeTablas.spec"
            echo "    exe," >> "EDF_CatalogoDeTablas.spec"
            echo "    a.binaries," >> "EDF_CatalogoDeTablas.spec"
            echo "    a.zipfiles," >> "EDF_CatalogoDeTablas.spec"
            echo "    a.datas," >> "EDF_CatalogoDeTablas.spec"
            echo "    strip=False," >> "EDF_CatalogoDeTablas.spec"
            echo "    upx=True," >> "EDF_CatalogoDeTablas.spec"
            echo "    upx_exclude=[]," >> "EDF_CatalogoDeTablas.spec"
            echo "    name='EDF_CatalogoDeTablas'," >> "EDF_CatalogoDeTablas.spec"
            echo ")" >> "EDF_CatalogoDeTablas.spec"
            
            echo "✅ Archivo EDF_CatalogoDeTablas.spec creado manualmente"
            echo "📏 Tamaño del archivo: $(wc -l < EDF_CatalogoDeTablas.spec) líneas"
            echo "📋 Primeras 10 líneas:"
            head -10 EDF_CatalogoDeTablas.spec
          fi
          
          echo "✅ Verificación completada"
          
      - name: Verify requirements file
        run: |
          echo "🔍 Verificando archivo requirements..."
          ls -la requirements_python310.txt
          echo "�� Contenido del archivo:"
          head -10 requirements_python310.txt
          echo "✅ Verificación de requirements completada"

      - name: Build App
        run: |
          echo "🔨 Iniciando construcción de la aplicación..."
          
          # Intentar usar el script de build mejorado si existe
          if [ -f "build_macos_app.sh" ]; then
            echo "🔧 Usando script de build mejorado..."
            chmod +x build_macos_app.sh
            ./build_macos_app.sh
          else
            echo "⚠️  Script build_macos_app.sh no encontrado, usando PyInstaller directamente..."
            python -m PyInstaller EDF_CatalogoDeTablas.spec --clean
          fi
          
          echo "✅ Construcción completada"

      - name: Verify build output
        run: |
          echo "Verificando salida de construcción..."
          ls -la dist/
          ls -la dist/EDF_CatalogoDeTablas.app/Contents/MacOS/ || echo "Aplicación no construida correctamente"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: EDF_CatalogoDeTablas.app
          path: dist/EDF_CatalogoDeTablas.app
          retention-days: 30

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs
          path: |
            dist/
            build/
          retention-days: 7
