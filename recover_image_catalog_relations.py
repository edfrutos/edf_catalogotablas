#!/usr/bin/env python3
"""
Script para intentar recuperar las relaciones originales entre im√°genes y cat√°logos
"""

import os
import sys
from dotenv import load_dotenv
import re
from datetime import datetime

# Agregar el directorio actual al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def recover_image_catalog_relations():
    """Intenta recuperar las relaciones originales entre im√°genes y cat√°logos"""
    
    print("üîç RECUPERANDO RELACIONES IMAGEN-CAT√ÅLOGO")
    print("=" * 60)
    
    # Cargar variables de entorno
    load_dotenv()
    
    try:
        # Importar la aplicaci√≥n Flask
        from main_app import create_app
        
        # Crear la aplicaci√≥n
        app = create_app()
        
        with app.app_context():
            # Importar funciones de base de datos
            from app.database import get_mongo_db
            
            # Obtener la base de datos
            db = get_mongo_db()
            if db is None:
                print("   ‚ùå No se pudo conectar a la base de datos")
                return False
            
            # Obtener archivos f√≠sicos
            upload_dir = os.path.join(app.static_folder, 'uploads')
            physical_files = []
            
            if os.path.exists(upload_dir):
                for filename in os.listdir(upload_dir):
                    if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.bmp')):
                        physical_files.append(filename)
            
            print(f"   üìÅ Archivos f√≠sicos encontrados: {len(physical_files)}")
            
            # Obtener cat√°logos existentes
            collection = db["spreadsheets"]
            catalogs = list(collection.find({}))
            
            print(f"   üìã Cat√°logos existentes: {len(catalogs)}")
            
            # Analizar patrones en nombres de archivos para identificar cat√°logos
            catalog_patterns = {}
            image_catalog_matches = {}
            
            # Patrones comunes en nombres de archivos
            patterns = [
                r'(\w+)_(\d+)_(\w+)',  # ejemplo: tabla_1_c4384f19.jpg
                r'(\w+)\.(\w+)_(\d+)_(\w+)',  # ejemplo: storage_units.xlsx_6_895fc11c.jpg
                r'(\w+)_(\d+)_(\w+)',  # ejemplo: Catalogo_hecho_a_mano_0_a74e2715.jpg
            ]
            
            print(f"   üîç Analizando patrones en nombres de archivos...")
            
            for filename in physical_files:
                matched_catalog = None
                
                # Intentar extraer informaci√≥n del nombre del archivo
                for pattern in patterns:
                    match = re.search(pattern, filename)
                    if match:
                        # Buscar cat√°logos que coincidan con el patr√≥n
                        potential_catalog_name = match.group(1)
                        
                        # Buscar cat√°logos con nombres similares
                        for catalog in catalogs:
                            catalog_name = catalog.get("name", "").lower()
                            if (potential_catalog_name.lower() in catalog_name or 
                                catalog_name in potential_catalog_name.lower()):
                                matched_catalog = catalog
                                break
                        
                        if matched_catalog:
                            break
                
                # Si no se encontr√≥ por patr√≥n, intentar por fecha o contenido
                if not matched_catalog:
                    # Buscar por fechas en el nombre (formato iOS)
                    date_match = re.search(r'(\d{8})_(\d{9})_iOS', filename)
                    if date_match:
                        # Buscar cat√°logos creados en fechas similares
                        date_str = date_match.group(1)
                        for catalog in catalogs:
                            created_at = catalog.get("created_at")
                            if created_at:
                                # Manejar tanto objetos datetime como strings
                                if hasattr(created_at, 'strftime'):
                                    catalog_date = created_at.strftime("%Y%m%d")
                                else:
                                    # Si es string, intentar parsear
                                    try:
                                        from datetime import datetime
                                        if isinstance(created_at, str):
                                            # Intentar diferentes formatos
                                            for fmt in ["%Y-%m-%d", "%Y-%m-%d %H:%M:%S", "%Y-%m-%dT%H:%M:%S"]:
                                                try:
                                                    dt = datetime.strptime(created_at, fmt)
                                                    catalog_date = dt.strftime("%Y%m%d")
                                                    break
                                                except ValueError:
                                                    continue
                                            else:
                                                continue  # No se pudo parsear la fecha
                                        else:
                                            continue
                                    except:
                                        continue
                                
                                if catalog_date == date_str:
                                    matched_catalog = catalog
                                    break
                
                if matched_catalog:
                    image_catalog_matches[filename] = matched_catalog
                    catalog_id = str(matched_catalog.get("_id"))
                    if catalog_id not in catalog_patterns:
                        catalog_patterns[catalog_id] = []
                    catalog_patterns[catalog_id].append(filename)
            
            # Mostrar resultados del an√°lisis
            print(f"\n" + "="*50)
            print("AN√ÅLISIS DE RELACIONES ENCONTRADAS")
            print("="*50)
            
            total_matched = len(image_catalog_matches)
            print(f"üìä Im√°genes con cat√°logo identificado: {total_matched}")
            print(f"üìä Im√°genes sin cat√°logo identificado: {len(physical_files) - total_matched}")
            
            # Mostrar detalles por cat√°logo
            for catalog_id, images in catalog_patterns.items():
                catalog = next((c for c in catalogs if str(c.get("_id")) == catalog_id), None)
                if catalog:
                    catalog_name = catalog.get("name", "Sin nombre")
                    print(f"\nüìã {catalog_name} (ID: {catalog_id})")
                    print(f"   üì∏ {len(images)} im√°genes identificadas:")
                    for img in images[:5]:  # Mostrar solo las primeras 5
                        print(f"      - {img}")
                    if len(images) > 5:
                        print(f"      ... y {len(images) - 5} m√°s")
            
            # Im√°genes sin cat√°logo identificado
            unmatched_images = [f for f in physical_files if f not in image_catalog_matches]
            if unmatched_images:
                print(f"\n‚ùì IM√ÅGENES SIN CAT√ÅLOGO IDENTIFICADO ({len(unmatched_images)}):")
                for img in unmatched_images[:10]:
                    print(f"   - {img}")
                if len(unmatched_images) > 10:
                    print(f"   ... y {len(unmatched_images) - 10} m√°s")
            
            # Preguntar al usuario qu√© hacer
            print(f"\n" + "="*50)
            print("OPCIONES DISPONIBLES")
            print("="*50)
            
            if total_matched > 0:
                print(f"‚úÖ Opci√≥n 1: Restaurar {total_matched} im√°genes a sus cat√°logos originales")
                print(f"   - Las im√°genes se agregar√°n a las filas existentes de sus cat√°logos")
                print(f"   - Se migrar√°n a S3 autom√°ticamente")
            
            if unmatched_images:
                print(f"‚úÖ Opci√≥n 2: Crear cat√°logo separado para {len(unmatched_images)} im√°genes sin relaci√≥n")
                print(f"   - Se crear√° un cat√°logo 'Im√°genes Sin Clasificar'")
                print(f"   - Se migrar√°n a S3 autom√°ticamente")
            
            print(f"‚úÖ Opci√≥n 3: Solo mostrar an√°lisis (no hacer cambios)")
            
            return {
                'matched_images': image_catalog_matches,
                'unmatched_images': unmatched_images,
                'catalog_patterns': catalog_patterns,
                'total_matched': total_matched
            }
            
    except Exception as e:
        print(f"   ‚ùå Error en an√°lisis: {e}")
        import traceback
        traceback.print_exc()
        return False

def restore_images_to_catalogs(analysis_result):
    """Restaura las im√°genes a sus cat√°logos originales"""
    
    print("üîÑ RESTAURANDO IM√ÅGENES A CAT√ÅLOGOS ORIGINALES")
    print("=" * 60)
    
    # Cargar variables de entorno
    load_dotenv()
    
    try:
        # Importar la aplicaci√≥n Flask
        from main_app import create_app
        
        # Crear la aplicaci√≥n
        app = create_app()
        
        with app.app_context():
            # Importar funciones de base de datos y S3
            from app.database import get_mongo_db
            from app.utils.s3_utils import upload_file_to_s3
            
            # Obtener la base de datos
            db = get_mongo_db()
            if db is None:
                print("   ‚ùå No se pudo conectar a la base de datos")
                return False
            
            collection = db["spreadsheets"]
            upload_dir = os.path.join(app.static_folder, 'uploads')
            
            matched_images = analysis_result['matched_images']
            catalog_patterns = analysis_result['catalog_patterns']
            
            restored_count = 0
            failed_count = 0
            
            # Restaurar im√°genes por cat√°logo
            for catalog_id, images in catalog_patterns.items():
                catalog = collection.find_one({"_id": catalog_id})
                if not catalog:
                    print(f"   ‚ùå Cat√°logo no encontrado: {catalog_id}")
                    continue
                
                catalog_name = catalog.get("name", "Sin nombre")
                print(f"   üìã Restaurando {len(images)} im√°genes a '{catalog_name}'")
                
                # Obtener la primera fila del cat√°logo (o crear una nueva)
                rows = catalog.get("rows", [])
                if not rows:
                    # Crear una nueva fila si no existe
                    rows = [{"images": []}]
                
                # Agregar im√°genes a la primera fila
                for filename in images:
                    file_path = os.path.join(upload_dir, filename)
                    
                    if os.path.exists(file_path):
                        try:
                            # Subir a S3
                            s3_result = upload_file_to_s3(file_path, filename)
                            
                            if s3_result.get('success'):
                                # Agregar a la fila
                                if "images" not in rows[0]:
                                    rows[0]["images"] = []
                                rows[0]["images"].append(filename)
                                
                                # Eliminar archivo local
                                os.remove(file_path)
                                
                                restored_count += 1
                                print(f"      ‚úÖ Restaurada: {filename}")
                            else:
                                print(f"      ‚ùå Error S3: {filename}")
                                failed_count += 1
                                
                        except Exception as e:
                            print(f"      ‚ùå Error: {filename} - {e}")
                            failed_count += 1
                    else:
                        print(f"      ‚ö†Ô∏è  Archivo no encontrado: {filename}")
                        failed_count += 1
                
                # Actualizar el cat√°logo
                try:
                    collection.update_one(
                        {"_id": catalog_id},
                        {
                            "$set": {
                                "rows": rows,
                                "data": rows,  # Mantener compatibilidad
                                "updated_at": datetime.now()
                            }
                        }
                    )
                    print(f"   ‚úÖ Cat√°logo '{catalog_name}' actualizado")
                    
                except Exception as e:
                    print(f"   ‚ùå Error actualizando cat√°logo: {e}")
                    failed_count += len(images)
            
            # Imprimir estad√≠sticas
            print(f"\n" + "="*50)
            print("ESTAD√çSTICAS DE RESTAURACI√ìN")
            print("="*50)
            print(f"Im√°genes restauradas: {restored_count}")
            print(f"Errores: {failed_count}")
            print(f"Cat√°logos actualizados: {len(catalog_patterns)}")
            
            return restored_count > 0
            
    except Exception as e:
        print(f"   ‚ùå Error en restauraci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal"""
    
    print("üöÄ INICIANDO RECUPERACI√ìN DE RELACIONES IMAGEN-CAT√ÅLOGO")
    print("=" * 60)
    
    # Ejecutar an√°lisis
    analysis_result = recover_image_catalog_relations()
    
    if not analysis_result:
        print(f"\n‚ùå El an√°lisis no se complet√≥ correctamente")
        return False
    
    if analysis_result['total_matched'] == 0:
        print(f"\n‚ö†Ô∏è  No se encontraron relaciones entre im√°genes y cat√°logos")
        print(f"   Considera usar la migraci√≥n simple a S3")
        return False
    
    # Preguntar al usuario qu√© hacer
    print(f"\n¬øQu√© acci√≥n deseas realizar?")
    print(f"1. Restaurar {analysis_result['total_matched']} im√°genes a sus cat√°logos originales")
    print(f"2. Solo mostrar an√°lisis (no hacer cambios)")
    
    # Por ahora, ejecutar autom√°ticamente la restauraci√≥n
    print(f"\nüîÑ Ejecutando restauraci√≥n autom√°tica...")
    
    success = restore_images_to_catalogs(analysis_result)
    
    if success:
        print(f"\nüéâ Restauraci√≥n completada exitosamente")
        print(f"üí° Las im√°genes han sido restauradas a sus cat√°logos originales")
        return True
    else:
        print(f"\n‚ùå La restauraci√≥n no se complet√≥ correctamente")
        return False

if __name__ == "__main__":
    main()
