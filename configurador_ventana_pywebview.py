#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Configurador de Tama√±o de Ventana para EDF Cat√°logoDeTablas (PyWebView)
========================================================================

Este archivo te permite configurar f√°cilmente el tama√±o de la ventana
de la aplicaci√≥n y aplicar los cambios autom√°ticamente al launcher.py

INSTRUCCIONES DE USO:
1. Modifica los valores ANCHO y ALTO seg√∫n tus preferencias
2. Ejecuta este archivo para aplicar los cambios
3. Los valores se ajustar√°n autom√°ticamente para PyWebView

"""

# ===== CONFIGURACI√ìN DE TAMA√ëO =====
# Modifica estos valores para cambiar el tama√±o de la ventana

# Tama√±o personalizado (ancho x alto en p√≠xeles reales deseados)
ANCHO_DESEADO = 1680  # Tama√±o real que quieres obtener
ALTO_DESEADO = 1050   # Tama√±o real que quieres obtener

# ===== TAMA√ëOS PREDEFINIDOS =====
# Descomenta el tama√±o que prefieras y comenta los dem√°s

# Peque√±o - ideal para pantallas peque√±as
# ANCHO_DESEADO, ALTO_DESEADO = 800, 600

# Mediano - tama√±o est√°ndar
# ANCHO_DESEADO, ALTO_DESEADO = 1024, 768

# Grande - para pantallas medianas
# ANCHO_DESEADO, ALTO_DESEADO = 1280, 800

# Extra Grande - para pantallas grandes
# ANCHO_DESEADO, ALTO_DESEADO = 1440, 900

# Pantalla completa HD
# ANCHO_DESEADO, ALTO_DESEADO = 1920, 1080

# Formato 16:10 Profesional (actual)
# ANCHO_DESEADO, ALTO_DESEADO = 1680, 1050

def calcular_tama√±o_pywebview(ancho_real, alto_real):
    """
    Calcula el tama√±o que hay que configurar en PyWebView
    para obtener el tama√±o real deseado.
    
    PyWebView reduce autom√°ticamente el tama√±o aproximadamente un 10%
    """
    factor_compensacion = 1.1  # Compensar la reducci√≥n del 10%
    ancho_config = int(ancho_real * factor_compensacion)
    alto_config = int(alto_real * factor_compensacion)
    return ancho_config, alto_config

def mostrar_configuracion():
    """Muestra la configuraci√≥n actual."""
    ancho_config, alto_config = calcular_tama√±o_pywebview(ANCHO_DESEADO, ALTO_DESEADO)
    
    print("=" * 60)
    print("CONFIGURACI√ìN DE TAMA√ëO DE VENTANA")
    print("=" * 60)
    print(f"Tama√±o real deseado:    {ANCHO_DESEADO} x {ALTO_DESEADO} p√≠xeles")
    print(f"Tama√±o a configurar:    {ancho_config} x {alto_config} p√≠xeles")
    print(f"Relaci√≥n de aspecto:    {ANCHO_DESEADO/ALTO_DESEADO:.2f}:1")
    
    # Determinar el tipo de formato
    ratio = ANCHO_DESEADO / ALTO_DESEADO
    if abs(ratio - 16/9) < 0.1:
        formato = "16:9 (Widescreen)"
    elif abs(ratio - 4/3) < 0.1:
        formato = "4:3 (Cl√°sico)"
    elif abs(ratio - 16/10) < 0.1:
        formato = "16:10 (Profesional)"
    else:
        formato = "Personalizado"
    
    print(f"Formato detectado:      {formato}")
    print("=" * 60)
    
    return ancho_config, alto_config

def aplicar_configuracion():
    """
    Aplica la configuraci√≥n al launcher.py
    """
    import re
    
    ancho_config, alto_config = calcular_tama√±o_pywebview(ANCHO_DESEADO, ALTO_DESEADO)
    
    try:
        # Leer el contenido actual de launcher.py
        with open('launcher.py', 'r', encoding='utf-8') as f:
            contenido = f.read()
        
        # Preparar las nuevas l√≠neas de configuraci√≥n
        nueva_config = f'''        # Configuraci√≥n de tama√±o de ventana
        # Formato configurado para obtener {ANCHO_DESEADO}x{ALTO_DESEADO} p√≠xeles reales
        WINDOW_WIDTH = {ancho_config}   # Resultar√° en ~{ANCHO_DESEADO} p√≠xeles
        WINDOW_HEIGHT = {alto_config}  # Resultar√° en ~{ALTO_DESEADO} p√≠xeles
        
        # Factor de escala aproximado de PyWebView:
        # El tama√±o real ser√° aproximadamente un 90% del especificado
        # {ancho_config} x {alto_config} -> resultar√° en aprox. {ANCHO_DESEADO} x {ALTO_DESEADO}
'''
        
        # Buscar y reemplazar la secci√≥n de configuraci√≥n
        patron = r'        # Configuraci√≥n de tama√±o de ventana.*?(?=        window = )'
        nuevo_contenido = re.sub(
            patron, 
            nueva_config,
            contenido,
            flags=re.DOTALL
        )
        
        # Verificar que se hizo el cambio
        if nuevo_contenido == contenido:
            print("‚ùå No se pudo encontrar la secci√≥n de configuraci√≥n en launcher.py")
            return False
        
        # Guardar los cambios
        with open('launcher.py', 'w', encoding='utf-8') as f:
            f.write(nuevo_contenido)
        
        print("\n‚úÖ Configuraci√≥n aplicada exitosamente a launcher.py")
        print(f"   La ventana se abrir√° con un tama√±o de {ANCHO_DESEADO}x{ALTO_DESEADO} p√≠xeles")
        return True
        
    except FileNotFoundError:
        print("‚ùå Error: No se encontr√≥ el archivo launcher.py")
        return False
    except Exception as e:
        print(f"‚ùå Error: No se pudo aplicar la configuraci√≥n")
        print(f"   Error t√©cnico: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîß Configurador de Tama√±o de Ventana - EDF Cat√°logoDeTablas")
    print()
    
    # Mostrar la configuraci√≥n actual
    mostrar_configuracion()
    
    # Preguntar si aplicar los cambios
    respuesta = input("\n¬øAplicar esta configuraci√≥n al launcher.py? (s/n): ").lower().strip()
    
    if respuesta in ['s', 'si', 's√≠', 'y', 'yes']:
        if aplicar_configuracion():
            print("\nüöÄ Para ver los cambios:")
            print("1. Cierra la aplicaci√≥n si est√° abierta")
            print("2. Ejecuta la aplicaci√≥n normalmente")
            print("3. La ventana deber√≠a abrirse con el nuevo tama√±o")
        else:
            print("\n‚ùå No se pudieron aplicar los cambios")
    else:
        print("\n‚èπÔ∏è  Configuraci√≥n cancelada. No se realizaron cambios.")

if __name__ == "__main__":
    main()
