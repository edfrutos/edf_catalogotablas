#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Configuraci√≥n de Tama√±o de Ventana para EDF Cat√°logoDeTablas
============================================================

Este archivo te permite configurar f√°cilmente el tama√±o de la ventana
de la aplicaci√≥n sin modificar el c√≥digo principal.

INSTRUCCIONES DE USO:
1. Modifica los valores ANCHO y ALTO seg√∫n tus preferencias
2. Ejecuta este archivo para lanzar la aplicaci√≥n con el tama√±o personalizado
3. O importa la configuraci√≥n en tu aplicaci√≥n principal

"""

# ===== CONFIGURACI√ìN DE TAMA√ëO =====
# Modifica estos valores para cambiar el tama√±o de la ventana

# Tama√±o personalizado (ancho x alto en p√≠xeles)
ANCHO = 1680
ALTO = 1050

# ===== TAMA√ëOS PREDEFINIDOS =====
# Descomenta el tama√±o que prefieras y comenta los dem√°s

# Peque√±o - ideal para pantallas peque√±as
# ANCHO, ALTO = 800, 600

# Mediano - tama√±o est√°ndar (predeterminado)
# ANCHO, ALTO = 1024, 768

# Grande - para pantallas medianas
# ANCHO, ALTO = 1280, 800

# Extra Grande - para pantallas grandes
# ANCHO, ALTO = 1440, 900

# Pantalla completa HD - para monitores Full HD
# ANCHO, ALTO = 1920, 1080

# Pantalla completa 4K - para monitores 4K (ajustado)
# ANCHO, ALTO = 1600, 1200

# ===== CONFIGURACIONES ESPECIALES =====

# Formato 16:9 (widescreen)
# ANCHO, ALTO = 1366, 768  # HD Ready
# ANCHO, ALTO = 1600, 900  # HD+
# ANCHO, ALTO = 1920, 1080 # Full HD

# Formato 4:3 (cl√°sico)
# ANCHO, ALTO = 1024, 768  # XGA
# ANCHO, ALTO = 1280, 960  # SXGA-
# ANCHO, ALTO = 1400, 1050 # SXGA+

# Formato 16:10 (pantallas profesionales)
# ANCHO, ALTO = 1280, 800  # WXGA
# ANCHO, ALTO = 1440, 900  # WXGA+
# ANCHO, ALTO = 1680, 1050 # WSXGA+

def obtener_configuracion():
    """
    Retorna la configuraci√≥n actual de tama√±o de ventana.
    
    Returns:
        tuple: (ancho, alto) en p√≠xeles
    """
    return ANCHO, ALTO

def validar_tama√±o(ancho, alto):
    """
    Valida que el tama√±o est√© dentro de los l√≠mites permitidos.
    
    Args:
        ancho (int): Ancho en p√≠xeles
        alto (int): Alto en p√≠xeles
        
    Returns:
        tuple: (ancho, alto) validados y ajustados si es necesario
    """
    # L√≠mites m√≠nimos y m√°ximos
    MIN_ANCHO, MIN_ALTO = 800, 600
    MAX_ANCHO, MAX_ALTO = 2560, 1600
    
    # Ajustar si est√° fuera de los l√≠mites
    ancho_ajustado = max(MIN_ANCHO, min(ancho, MAX_ANCHO))
    alto_ajustado = max(MIN_ALTO, min(alto, MAX_ALTO))
    
    if ancho != ancho_ajustado or alto != alto_ajustado:
        print(f"‚ö†Ô∏è  Tama√±o ajustado de {ancho}x{alto} a {ancho_ajustado}x{alto_ajustado}")
        print(f"   L√≠mites: {MIN_ANCHO}x{MIN_ALTO} - {MAX_ANCHO}x{MAX_ALTO}")
    
    return ancho_ajustado, alto_ajustado

def mostrar_configuracion():
    """Muestra la configuraci√≥n actual de tama√±o."""
    ancho, alto = obtener_configuracion()
    ancho_val, alto_val = validar_tama√±o(ancho, alto)
    
    print("=" * 50)
    print("CONFIGURACI√ìN DE TAMA√ëO DE VENTANA")
    print("=" * 50)
    print(f"Tama√±o configurado: {ancho} x {alto} p√≠xeles")
    print(f"Tama√±o validado:    {ancho_val} x {alto_val} p√≠xeles")
    print(f"Relaci√≥n de aspecto: {ancho_val/alto_val:.2f}:1")
    
    # Determinar el tipo de formato
    ratio = ancho_val / alto_val
    if abs(ratio - 16/9) < 0.1:
        formato = "16:9 (Widescreen)"
    elif abs(ratio - 4/3) < 0.1:
        formato = "4:3 (Cl√°sico)"
    elif abs(ratio - 16/10) < 0.1:
        formato = "16:10 (Profesional)"
    else:
        formato = "Personalizado"
    
    print(f"Formato detectado:  {formato}")
    print("=" * 50)

if __name__ == "__main__":
    # Mostrar la configuraci√≥n actual
    mostrar_configuracion()
    
    # Intentar lanzar la aplicaci√≥n con la configuraci√≥n
    try:
        from ventana_edf_catalogodetablas import CatalogoTablasWindow
        from PyQt6.QtWidgets import QApplication
        import sys
        
        # Obtener y validar el tama√±o
        ancho, alto = obtener_configuracion()
        ancho_val, alto_val = validar_tama√±o(ancho, alto)
        
        # Crear la aplicaci√≥n
        app = QApplication(sys.argv)
        app.setStyle('Fusion')
        
        # Crear la ventana con el tama√±o personalizado
        print(f"\nüöÄ Iniciando aplicaci√≥n con tama√±o {ancho_val}x{alto_val}...")
        window = CatalogoTablasWindow(ancho_val, alto_val)
        window.show()
        
        # Ejecutar la aplicaci√≥n
        sys.exit(app.exec())
        
    except ImportError as e:
        print(f"\n‚ùå Error: No se pudo importar la aplicaci√≥n principal.")
        print(f"   Aseg√∫rate de que 'ventana_edf_catalogodetablas.py' est√© en el mismo directorio.")
        print(f"   Error t√©cnico: {e}")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
