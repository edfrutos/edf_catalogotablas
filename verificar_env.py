#!/usr/bin/env python3
"""
Script de verificaci√≥n del archivo .env
Verifica que todas las variables cr√≠ticas est√°n correctamente configuradas
"""

import os
import sys
from pathlib import Path


def main():
    """Funci√≥n principal de verificaci√≥n del archivo .env"""
    print("üîç VERIFICADOR DE ARCHIVO .env")
    print("=" * 40)

    # Verificar que existe .env
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå Archivo .env no encontrado")
        sys.exit(1)

    print("‚úÖ Archivo .env encontrado")

    # Cargar variables
    try:
        from dotenv import load_dotenv

        load_dotenv()
        print("‚úÖ Variables de entorno cargadas")
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv no instalado. Instalando...")
        os.system("pip install python-dotenv")
        from dotenv import load_dotenv

        load_dotenv()

    # Variables cr√≠ticas a verificar
    critical_vars = {
        "SECRET_KEY": "Clave secreta de Flask",
        "MONGO_URI": "URI de MongoDB",
        "BREVO_SMTP_USERNAME": "Usuario SMTP Brevo",
        "BREVO_SMTP_PASSWORD": "Password SMTP Brevo",
        "NOTIFICATION_EMAIL_1": "Email de notificaci√≥n 1",
        "NOTIFICATION_EMAIL_2": "Email de notificaci√≥n 2",
    }

    print("\nüìã VERIFICACI√ìN DE VARIABLES CR√çTICAS:")
    print("-" * 40)

    all_ok = True
    for var, _desc in critical_vars.items():
        value = os.getenv(var)
        if value:
            # Mostrar solo parte de valores sensibles
            if "PASSWORD" in var or "SECRET" in var or "KEY" in var:
                display_value = f"{value[:8]}...***"
            else:
                display_value = value
            print(f"‚úÖ {var}: {display_value}")
        else:
            print(f"‚ùå {var}: NO DEFINIDA")
            all_ok = False

    # Verificar valores problem√°ticos
    print("\nüö® VERIFICACI√ìN DE SEGURIDAD:")
    print("-" * 40)

    secret_key = os.getenv("SECRET_KEY", "")
    if "clave-secreta" in secret_key.lower():
        print("‚ö†Ô∏è  SECRET_KEY usando valor por defecto")
    else:
        print("‚úÖ SECRET_KEY personalizada")

    brevo_password = os.getenv("BREVO_SMTP_PASSWORD", "")
    if "Rmp3UXwsIkvA0c1d" in brevo_password:
        print("üö® BREVO_SMTP_PASSWORD usando credencial comprometida")
    else:
        print("‚úÖ BREVO_SMTP_PASSWORD actualizada")

    brevo_api = os.getenv("BREVO_API_KEY", "")
    if "tu-nueva-brevo" in brevo_api:
        print("‚ö†Ô∏è  BREVO_API_KEY necesita configuraci√≥n")
    else:
        print("‚úÖ BREVO_API_KEY configurada")

    # Verificar conexi√≥n MongoDB (opcional)
    print("\nüóÑÔ∏è  VERIFICACI√ìN DE MONGODB:")
    print("-" * 40)

    try:
        import pymongo

        mongo_uri = os.getenv("MONGO_URI")
        if mongo_uri:
            client = pymongo.MongoClient(mongo_uri, serverSelectionTimeoutMS=5000)
            client.admin.command("ismaster")
            print("‚úÖ MongoDB conectado correctamente")
        else:
            print("‚ùå MONGO_URI no definida")
    except ImportError:
        print("‚ö†Ô∏è  pymongo no instalado - no se puede verificar MongoDB")
    except Exception as e:
        print(f"‚ùå Error conectando a MongoDB: {e}")

    print("\n" + "=" * 40)
    if all_ok:
        print("‚úÖ Archivo .env correctamente configurado")
    else:
        print("‚ö†Ô∏è  Archivo .env necesita configuraci√≥n adicional")

    return 0 if all_ok else 1


if __name__ == "__main__":
    sys.exit(main())
