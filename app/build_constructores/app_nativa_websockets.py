#!/usr/bin/env python3
"""
EDF Cat√°logo de Tablas - Aplicaci√≥n Nativa con WebSockets
Aplicaci√≥n de escritorio nativa usando tkinter y WebSockets
para comunicaci√≥n en tiempo real sin navegador
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import asyncio
import websockets
import json
import threading
import sqlite3
import os
from datetime import datetime
from pathlib import Path
import sys


class EDFCatalogoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("EDF Cat√°logo de Tablas - Aplicaci√≥n Nativa WebSockets")
        self.root.geometry("1200x800")
        self.root.configure(bg="#f0f0f0")

        # Configurar WebSocket
        self.websocket = None
        self.websocket_connected = False
        self.server_url = "ws://localhost:8765"

        # Configurar estilo
        self.setup_styles()

        # Variables
        self.current_user = None
        self.catalogos = []
        self.current_catalogo = None

        # Crear interfaz
        self.create_widgets()

        # Iniciar WebSocket en hilo separado
        self.start_websocket()

        # Cargar datos iniciales
        self.load_initial_data()

    def setup_styles(self):
        """Configurar estilos de la aplicaci√≥n"""
        style = ttk.Style()
        style.theme_use("clam")

        # Configurar colores
        style.configure(
            "Title.TLabel",
            font=("Helvetica", 16, "bold"),
            foreground="#2c3e50",
            background="#f0f0f0",
        )

        style.configure(
            "Header.TLabel",
            font=("Helvetica", 12, "bold"),
            foreground="#34495e",
            background="#f0f0f0",
        )

        style.configure("Action.TButton", font=("Helvetica", 10, "bold"), padding=10)

        style.configure("Success.TButton", background="#27ae60", foreground="white")

        style.configure("Warning.TButton", background="#e74c3c", foreground="white")

    def create_widgets(self):
        """Crear todos los widgets de la interfaz"""
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Configurar grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)

        # T√≠tulo principal
        title_label = ttk.Label(
            main_frame, text="EDF Cat√°logo de Tablas (WebSockets)", style="Title.TLabel"
        )
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))

        # Frame de navegaci√≥n
        nav_frame = ttk.Frame(main_frame)
        nav_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))

        # Botones de navegaci√≥n
        ttk.Button(
            nav_frame, text="üè† Inicio", command=self.show_home, style="Action.TButton"
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(
            nav_frame,
            text="üìã Cat√°logos",
            command=self.show_catalogos,
            style="Action.TButton",
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(
            nav_frame,
            text="üë§ Usuarios",
            command=self.show_usuarios,
            style="Action.TButton",
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(
            nav_frame,
            text="üîß Herramientas",
            command=self.show_herramientas,
            style="Action.TButton",
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(
            nav_frame, text="‚ùì Ayuda", command=self.show_ayuda, style="Action.TButton"
        ).pack(side=tk.LEFT, padx=5)

        # Frame de contenido principal
        self.content_frame = ttk.Frame(main_frame)
        self.content_frame.grid(
            row=2, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S)
        )
        self.content_frame.columnconfigure(0, weight=1)
        self.content_frame.rowconfigure(0, weight=1)

        # Barra de estado con WebSocket
        self.status_var = tk.StringVar()
        self.status_var.set("Conectando a WebSocket...")
        status_bar = ttk.Label(
            main_frame, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W
        )
        status_bar.grid(
            row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0)
        )

    def start_websocket(self):
        """Iniciar conexi√≥n WebSocket en hilo separado"""

        def websocket_thread():
            asyncio.run(self.websocket_client())

        thread = threading.Thread(target=websocket_thread, daemon=True)
        thread.start()

    async def websocket_client(self):
        """Cliente WebSocket"""
        try:
            async with websockets.connect(self.server_url) as websocket:
                self.websocket = websocket
                self.websocket_connected = True

                # Actualizar estado en el hilo principal
                self.root.after(
                    0, lambda: self.status_var.set("‚úÖ Conectado a WebSocket")
                )

                # Enviar mensaje de autenticaci√≥n
                await self.send_websocket_message(
                    {"type": "auth", "user": "admin", "action": "login"}
                )

                # Escuchar mensajes
                async for message in websocket:
                    await self.handle_websocket_message(message)

        except Exception as e:
            self.websocket_connected = False
            self.root.after(0, lambda: self.status_var.set(f"‚ùå Error WebSocket: {e}"))
            print(f"Error WebSocket: {e}")

    async def send_websocket_message(self, data):
        """Enviar mensaje por WebSocket"""
        if self.websocket and self.websocket_connected:
            try:
                await self.websocket.send(json.dumps(data))
            except Exception as e:
                print(f"Error enviando mensaje: {e}")

    async def handle_websocket_message(self, message):
        """Manejar mensaje recibido por WebSocket"""
        try:
            data = json.loads(message)
            message_type = data.get("type")

            if message_type == "catalogos":
                self.catalogos = data.get("data", [])
                self.root.after(0, self.update_catalogos_display)
            elif message_type == "users":
                users = data.get("data", [])
                self.root.after(0, lambda: self.update_users_display(users))
            elif message_type == "notification":
                self.root.after(
                    0, lambda: messagebox.showinfo("Notificaci√≥n", data.get("message"))
                )

        except Exception as e:
            print(f"Error procesando mensaje: {e}")

    def update_catalogos_display(self):
        """Actualizar display de cat√°logos"""
        if hasattr(self, "catalogos_listbox"):
            self.load_catalogos()

    def update_users_display(self, users):
        """Actualizar display de usuarios"""
        # Implementar actualizaci√≥n de usuarios
        pass

    def show_home(self):
        """Mostrar p√°gina de inicio"""
        self.clear_content()

        # Frame de bienvenida
        welcome_frame = ttk.Frame(self.content_frame)
        welcome_frame.grid(
            row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=20, pady=20
        )
        welcome_frame.columnconfigure(0, weight=1)

        # Mensaje de bienvenida
        welcome_text = """
        üéâ ¬°Bienvenido a EDF Cat√°logo de Tablas!
        
        Esta es una aplicaci√≥n nativa con WebSockets que te permite:
        
        üìã ‚Ä¢ Gestionar cat√°logos de productos en tiempo real
        üë§ ‚Ä¢ Administrar usuarios y permisos
        üñºÔ∏è  ‚Ä¢ Gestionar im√°genes y documentos
        üìä ‚Ä¢ Generar reportes y estad√≠sticas
        üîß ‚Ä¢ Acceder a herramientas de mantenimiento
        
        üåê Comunicaci√≥n WebSocket: {}
        
        Selecciona una opci√≥n del men√∫ superior para comenzar.
        """.format(
            "‚úÖ Conectado" if self.websocket_connected else "‚ùå Desconectado"
        )

        welcome_label = ttk.Label(
            welcome_frame, text=welcome_text, font=("Helvetica", 12), justify=tk.LEFT
        )
        welcome_label.grid(row=0, column=0, pady=20)

        # Estad√≠sticas r√°pidas
        stats_frame = ttk.LabelFrame(
            welcome_frame, text="üìä Estad√≠sticas R√°pidas", padding=20
        )
        stats_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=20)

        # Simular estad√≠sticas
        stats_text = f"""
        üìã Cat√°logos: {len(self.catalogos)}
        üë§ Usuarios: 5
        üñºÔ∏è  Im√°genes: 25
        üìÑ Documentos: 12
        üåê WebSocket: {'Conectado' if self.websocket_connected else 'Desconectado'}
        """

        stats_label = ttk.Label(
            stats_frame, text=stats_text, font=("Helvetica", 10), justify=tk.LEFT
        )
        stats_label.grid(row=0, column=0)

    def show_catalogos(self):
        """Mostrar gesti√≥n de cat√°logos"""
        self.clear_content()

        # Frame principal de cat√°logos
        catalogos_frame = ttk.Frame(self.content_frame)
        catalogos_frame.grid(
            row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=20, pady=20
        )
        catalogos_frame.columnconfigure(1, weight=1)
        catalogos_frame.rowconfigure(1, weight=1)

        # Panel izquierdo - Lista de cat√°logos
        left_panel = ttk.LabelFrame(
            catalogos_frame, text="üìã Cat√°logos Disponibles", padding=10
        )
        left_panel.grid(
            row=0, column=0, rowspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10)
        )

        # Botones de acci√≥n
        ttk.Button(
            left_panel,
            text="‚ûï Nuevo Cat√°logo",
            command=self.nuevo_catalogo,
            style="Action.TButton",
        ).pack(fill=tk.X, pady=5)
        ttk.Button(
            left_panel,
            text="üì• Importar",
            command=self.importar_catalogo,
            style="Action.TButton",
        ).pack(fill=tk.X, pady=5)
        ttk.Button(
            left_panel,
            text="üì§ Exportar",
            command=self.exportar_catalogo,
            style="Action.TButton",
        ).pack(fill=tk.X, pady=5)

        # Lista de cat√°logos
        self.catalogos_listbox = tk.Listbox(
            left_panel, height=15, font=("Helvetica", 10)
        )
        self.catalogos_listbox.pack(fill=tk.BOTH, expand=True, pady=10)
        self.catalogos_listbox.bind("<<ListboxSelect>>", self.on_catalogo_select)

        # Panel derecho - Detalles del cat√°logo
        right_panel = ttk.LabelFrame(
            catalogos_frame, text="üìÑ Detalles del Cat√°logo", padding=10
        )
        right_panel.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        right_panel.columnconfigure(0, weight=1)

        # Informaci√≥n del cat√°logo
        self.catalogo_info = tk.Text(
            right_panel, height=10, width=50, font=("Helvetica", 10), wrap=tk.WORD
        )
        self.catalogo_info.pack(fill=tk.BOTH, expand=True, pady=5)

        # Botones de acci√≥n del cat√°logo
        action_frame = ttk.Frame(right_panel)
        action_frame.pack(fill=tk.X, pady=10)

        ttk.Button(
            action_frame,
            text="‚úèÔ∏è  Editar",
            command=self.editar_catalogo,
            style="Action.TButton",
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(
            action_frame,
            text="üóëÔ∏è  Eliminar",
            command=self.eliminar_catalogo,
            style="Warning.TButton",
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(
            action_frame,
            text="üëÅÔ∏è  Ver",
            command=self.ver_catalogo,
            style="Action.TButton",
        ).pack(side=tk.LEFT, padx=5)

        # Cargar cat√°logos
        self.load_catalogos()

    def show_usuarios(self):
        """Mostrar gesti√≥n de usuarios"""
        self.clear_content()

        usuarios_frame = ttk.Frame(self.content_frame)
        usuarios_frame.grid(
            row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=20, pady=20
        )

        # T√≠tulo
        ttk.Label(
            usuarios_frame, text="üë§ Gesti√≥n de Usuarios", style="Header.TLabel"
        ).grid(row=0, column=0, pady=(0, 20))

        # Botones de acci√≥n
        action_frame = ttk.Frame(usuarios_frame)
        action_frame.grid(row=1, column=0, pady=20)

        ttk.Button(
            action_frame,
            text="‚ûï Nuevo Usuario",
            command=self.nuevo_usuario,
            style="Action.TButton",
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(
            action_frame,
            text="üîê Cambiar Contrase√±a",
            command=self.cambiar_password,
            style="Action.TButton",
        ).pack(side=tk.LEFT, padx=5)
        ttk.Button(
            action_frame,
            text="üë• Gestionar Roles",
            command=self.gestionar_roles,
            style="Action.TButton",
        ).pack(side=tk.LEFT, padx=5)

        # Lista de usuarios (simulada)
        usuarios_data = [
            ("admin", "Administrador", "admin@edf.com", "Activo"),
            ("usuario1", "Usuario 1", "user1@edf.com", "Activo"),
            ("usuario2", "Usuario 2", "user2@edf.com", "Inactivo"),
        ]

        # Crear tabla de usuarios
        columns = ("Usuario", "Nombre", "Email", "Estado")
        tree = ttk.Treeview(usuarios_frame, columns=columns, show="headings", height=10)

        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=150)

        for usuario in usuarios_data:
            tree.insert("", tk.END, values=usuario)

        tree.grid(row=2, column=0, pady=20)

    def show_herramientas(self):
        """Mostrar herramientas de mantenimiento"""
        self.clear_content()

        tools_frame = ttk.Frame(self.content_frame)
        tools_frame.grid(
            row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=20, pady=20
        )

        # T√≠tulo
        ttk.Label(
            tools_frame, text="üîß Herramientas de Mantenimiento", style="Header.TLabel"
        ).grid(row=0, column=0, pady=(0, 20))

        # Grid de herramientas
        tools = [
            ("üíæ Backup", "Crear copia de seguridad", self.backup_system),
            ("üîÑ Restore", "Restaurar desde backup", self.restore_system),
            ("üßπ Limpieza", "Limpiar archivos temporales", self.cleanup_system),
            ("üìä Diagn√≥stico", "Diagnosticar sistema", self.diagnose_system),
            ("üîç Logs", "Ver logs del sistema", self.view_logs),
            ("‚öôÔ∏è  Configuraci√≥n", "Configurar aplicaci√≥n", self.configure_app),
        ]

        for i, (name, desc, command) in enumerate(tools):
            row = i // 2
            col = i % 2

            tool_frame = ttk.LabelFrame(tools_frame, text=name, padding=10)
            tool_frame.grid(
                row=row + 1,
                column=col,
                sticky=(tk.W, tk.E, tk.N, tk.S),
                padx=10,
                pady=10,
            )

            ttk.Label(tool_frame, text=desc, font=("Helvetica", 10)).pack(pady=5)
            ttk.Button(
                tool_frame, text="Ejecutar", command=command, style="Action.TButton"
            ).pack(pady=5)

    def show_ayuda(self):
        """Mostrar ayuda y documentaci√≥n"""
        self.clear_content()

        help_frame = ttk.Frame(self.content_frame)
        help_frame.grid(
            row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=20, pady=20
        )

        # T√≠tulo
        ttk.Label(
            help_frame, text="‚ùì Ayuda y Documentaci√≥n", style="Header.TLabel"
        ).grid(row=0, column=0, pady=(0, 20))

        # Contenido de ayuda
        help_text = """
        üéØ EDF Cat√°logo de Tablas - Aplicaci√≥n Nativa con WebSockets
        
        üìã GESTI√ìN DE CAT√ÅLOGOS:
        ‚Ä¢ Crear nuevos cat√°logos de productos
        ‚Ä¢ Editar cat√°logos existentes
        ‚Ä¢ Importar/exportar datos
        ‚Ä¢ Gestionar im√°genes y documentos
        
        üë§ GESTI√ìN DE USUARIOS:
        ‚Ä¢ Crear nuevos usuarios
        ‚Ä¢ Asignar roles y permisos
        ‚Ä¢ Gestionar contrase√±as
        ‚Ä¢ Control de acceso
        
        üîß HERRAMIENTAS:
        ‚Ä¢ Backup y restauraci√≥n
        ‚Ä¢ Limpieza del sistema
        ‚Ä¢ Diagn√≥stico y logs
        ‚Ä¢ Configuraci√≥n avanzada
        
        üåê WEBSOCKETS:
        ‚Ä¢ Comunicaci√≥n en tiempo real
        ‚Ä¢ Sin necesidad de navegador
        ‚Ä¢ Actualizaciones autom√°ticas
        ‚Ä¢ Conexi√≥n persistente
        
        üí° CONSEJOS:
        ‚Ä¢ Realiza backups regularmente
        ‚Ä¢ Mant√©n actualizada la aplicaci√≥n
        ‚Ä¢ Revisa los logs peri√≥dicamente
        ‚Ä¢ Contacta al administrador si tienes problemas
        
        üìû SOPORTE:
        ‚Ä¢ Email: soporte@edf.com
        ‚Ä¢ Tel√©fono: +34 123 456 789
        ‚Ä¢ Horario: L-V 9:00-18:00
        """

        help_label = ttk.Label(
            help_frame, text=help_text, font=("Helvetica", 11), justify=tk.LEFT
        )
        help_label.grid(row=1, column=0, pady=20)

    def clear_content(self):
        """Limpiar el contenido del frame principal"""
        for widget in self.content_frame.winfo_children():
            widget.destroy()

    def load_initial_data(self):
        """Cargar datos iniciales de la aplicaci√≥n"""
        # Simular carga de cat√°logos
        self.catalogos = [
            {
                "id": 1,
                "nombre": "Cat√°logo 2025",
                "fecha": "2025-01-15",
                "productos": 150,
            },
            {
                "id": 2,
                "nombre": "Cat√°logo Especial",
                "fecha": "2025-01-20",
                "productos": 75,
            },
            {
                "id": 3,
                "nombre": "Cat√°logo B√°sico",
                "fecha": "2025-01-25",
                "productos": 200,
            },
        ]

        self.status_var.set(f"Cargados {len(self.catalogos)} cat√°logos")

    def load_catalogos(self):
        """Cargar cat√°logos en la lista"""
        self.catalogos_listbox.delete(0, tk.END)
        for catalogo in self.catalogos:
            self.catalogos_listbox.insert(tk.END, catalogo["nombre"])

    def on_catalogo_select(self, event):
        """Manejar selecci√≥n de cat√°logo"""
        selection = self.catalogos_listbox.curselection()
        if selection:
            index = selection[0]
            self.current_catalogo = self.catalogos[index]
            self.show_catalogo_details()

    def show_catalogo_details(self):
        """Mostrar detalles del cat√°logo seleccionado"""
        if self.current_catalogo:
            details = f"""
            üìã CAT√ÅLOGO: {self.current_catalogo['nombre']}
            
            üÜî ID: {self.current_catalogo['id']}
            üìÖ Fecha: {self.current_catalogo['fecha']}
            üì¶ Productos: {self.current_catalogo['productos']}
            
            üìÑ DESCRIPCI√ìN:
            Este es un cat√°logo de productos con informaci√≥n detallada
            sobre precios, especificaciones y disponibilidad.
            
            üîß ACCIONES DISPONIBLES:
            ‚Ä¢ Editar informaci√≥n del cat√°logo
            ‚Ä¢ Gestionar productos
            ‚Ä¢ Exportar a diferentes formatos
            ‚Ä¢ Compartir con otros usuarios
            
            üåê WEBSOCKET: {'Conectado' if self.websocket_connected else 'Desconectado'}
            """

            self.catalogo_info.delete(1.0, tk.END)
            self.catalogo_info.insert(1.0, details)

    # M√©todos de acci√≥n (simulados)
    def nuevo_catalogo(self):
        messagebox.showinfo("Nuevo Cat√°logo", "Funci√≥n de nuevo cat√°logo")

    def importar_catalogo(self):
        filename = filedialog.askopenfilename(
            title="Importar Cat√°logo",
            filetypes=[
                ("Excel files", "*.xlsx"),
                ("CSV files", "*.csv"),
                ("All files", "*.*"),
            ],
        )
        if filename:
            messagebox.showinfo("Importar", f"Importando desde: {filename}")

    def exportar_catalogo(self):
        filename = filedialog.asksaveasfilename(
            title="Exportar Cat√°logo",
            defaultextension=".xlsx",
            filetypes=[
                ("Excel files", "*.xlsx"),
                ("CSV files", "*.csv"),
                ("PDF files", "*.pdf"),
            ],
        )
        if filename:
            messagebox.showinfo("Exportar", f"Exportando a: {filename}")

    def editar_catalogo(self):
        if self.current_catalogo:
            messagebox.showinfo(
                "Editar", f"Editando: {self.current_catalogo['nombre']}"
            )
        else:
            messagebox.showwarning("Advertencia", "Selecciona un cat√°logo primero")

    def eliminar_catalogo(self):
        if self.current_catalogo:
            if messagebox.askyesno(
                "Confirmar", f"¬øEliminar {self.current_catalogo['nombre']}?"
            ):
                messagebox.showinfo("Eliminado", "Cat√°logo eliminado")
        else:
            messagebox.showwarning("Advertencia", "Selecciona un cat√°logo primero")

    def ver_catalogo(self):
        if self.current_catalogo:
            messagebox.showinfo("Ver", f"Viendo: {self.current_catalogo['nombre']}")
        else:
            messagebox.showwarning("Advertencia", "Selecciona un cat√°logo primero")

    def nuevo_usuario(self):
        messagebox.showinfo("Nuevo Usuario", "Funci√≥n de nuevo usuario")

    def cambiar_password(self):
        messagebox.showinfo("Cambiar Contrase√±a", "Funci√≥n de cambiar contrase√±a")

    def gestionar_roles(self):
        messagebox.showinfo("Gestionar Roles", "Funci√≥n de gestionar roles")

    def backup_system(self):
        messagebox.showinfo("Backup", "Iniciando backup del sistema...")

    def restore_system(self):
        messagebox.showinfo("Restore", "Funci√≥n de restauraci√≥n")

    def cleanup_system(self):
        messagebox.showinfo("Limpieza", "Iniciando limpieza del sistema...")

    def diagnose_system(self):
        messagebox.showinfo("Diagn√≥stico", "Ejecutando diagn√≥stico del sistema...")

    def view_logs(self):
        messagebox.showinfo("Logs", "Mostrando logs del sistema...")

    def configure_app(self):
        messagebox.showinfo(
            "Configuraci√≥n", "Abriendo configuraci√≥n de la aplicaci√≥n..."
        )


def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    root = tk.Tk()
    app = EDFCatalogoApp(root)

    # Configurar cierre de ventana
    def on_closing():
        if messagebox.askokcancel("Salir", "¬øQuieres salir de la aplicaci√≥n?"):
            root.destroy()

    root.protocol("WM_DELETE_WINDOW", on_closing)

    # Centrar ventana
    root.update_idletasks()
    width = root.winfo_width()
    height = root.winfo_height()
    x = (root.winfo_screenwidth() // 2) - (width // 2)
    y = (root.winfo_screenheight() // 2) - (height // 2)
    root.geometry(f"{width}x{height}+{x}+{y}")

    # Iniciar aplicaci√≥n
    root.mainloop()


if __name__ == "__main__":
    main()
