#!/usr/bin/env python3
"""
Lanzador nativo para EDF Cat√°logo de Tablas
Ejecuta la aplicaci√≥n web Flask en una ventana nativa de macOS
con soporte para WebSockets en tiempo real
"""

import os
import sys
import tempfile
import threading
import time
from pathlib import Path

import requests
import webview

# Configurar directorios escribibles ANTES de cualquier importaci√≥n
if getattr(sys, "frozen", False):
    # Estamos en una aplicaci√≥n empaquetada
    temp_dir = Path(tempfile.gettempdir()) / "edf_catalogo_logs"
    temp_dir.mkdir(exist_ok=True)
    os.environ["LOG_DIR"] = str(temp_dir)
    os.environ["FLASK_LOG_DIR"] = str(temp_dir)
    print(f"üìù Directorio de logs configurado: {temp_dir}")

    # Configurar directorio de sesiones
    session_dir = temp_dir / "flask_session"
    session_dir.mkdir(exist_ok=True)
    os.environ["SESSION_FILE_DIR"] = str(session_dir)
    print(f"üìù Directorio de sesiones configurado: {session_dir}")

    # Configurar entorno de producci√≥n
    os.environ["FLASK_ENV"] = "production"
    os.environ["FLASK_DEBUG"] = "0"
    print("üîß Configurado entorno de producci√≥n")


def start_flask_server():
    """Inicia el servidor Flask en segundo plano"""
    try:
        from wsgi import app

        # Configuraci√≥n espec√≠fica para pywebview
        app.config.update(
            {
                "SESSION_COOKIE_SECURE": False,  # HTTP para pywebview
                "SESSION_COOKIE_HTTPONLY": False,  # Acceso desde JavaScript
                "SESSION_COOKIE_SAMESITE": None,  # Sin SameSite
                "SESSION_COOKIE_DOMAIN": None,  # Sin dominio espec√≠fico
            }
        )

        app.run(debug=False, port=5004, host="127.0.0.1", use_reloader=False)
    except Exception as e:
        print(f"‚ùå Error al iniciar el servidor Flask: {e}")
        sys.exit(1)


def wait_for_server():
    """Espera a que el servidor Flask est√© listo"""
    max_attempts = 30
    for attempt in range(max_attempts):
        try:
            response = requests.get("http://127.0.0.1:5004", timeout=1)
            if response.status_code in [200, 302]:
                print(f"‚úÖ Servidor Flask listo (intento {attempt + 1})")
                return True
        except requests.exceptions.RequestException:
            pass

        time.sleep(1)
        if attempt % 5 == 0:
            print(
                f"‚è≥ Esperando servidor Flask... "
                f"(intento {attempt + 1}/{max_attempts})"
            )

    print("‚ùå Timeout esperando al servidor Flask")
    return False


def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    print("üöÄ Iniciando EDF Cat√°logo de Tablas (Aplicaci√≥n Nativa WebSockets)")
    print("=" * 60)

    # Iniciar el servidor Flask en un hilo separado
    server_thread = threading.Thread(target=start_flask_server)
    server_thread.daemon = True
    server_thread.start()

    # Esperar a que el servidor est√© listo
    print("‚è≥ Iniciando servidor Flask...")
    if not wait_for_server():
        print("‚ùå No se pudo conectar al servidor Flask")
        sys.exit(1)

    try:
        # Crear la ventana nativa
        print("üñ•Ô∏è  Creando ventana nativa...")

        # Configuraci√≥n b√°sica para pywebview
        window_config = {
            "title": "EDF Cat√°logo de Tablas - Aplicaci√≥n Web Nativa",
            "url": "http://127.0.0.1:5004",
            "width": 1400,
            "height": 900,
            "resizable": True,
            "min_size": (800, 600),
            "text_select": True,
            "confirm_close": True,
        }

        # Crear la ventana nativa
        webview.create_window(**window_config)

        print("‚úÖ Ventana nativa creada")
        print("üñ•Ô∏è  Aplicaci√≥n web ejecut√°ndose en ventana nativa")
        print("üåê WebSockets habilitados para comunicaci√≥n en tiempo real")
        print("üõë Cierra la ventana para salir")
        print("-" * 60)

        # Iniciar la aplicaci√≥n con configuraci√≥n mejorada
        webview.start(debug=True, gui="native")

    except Exception as e:
        print(f"‚ùå Error al crear la ventana nativa: {e}")
        print("üîÑ Intentando abrir en navegador como fallback...")

        # Fallback: abrir en navegador
        import webbrowser

        webbrowser.open("http://127.0.0.1:5004")

        # Mantener el servidor corriendo
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë Aplicaci√≥n detenida")


if __name__ == "__main__":
    main()
